package asint;

//----------revisar-----------
import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;

scan with {: return getScanner().next_token(); :};
parser code {: 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);
:};
//--------------------------

terminal  ID, NENT, NREAL, PAP, PCIERRE, IGUAL, TRUE, FALSE,
	 AND, OR, NOT, MENOR, MENORIGUAL, MAYOR, MAYORIGUAL, COMPARACION,
	 DISTINTO, MAS, MENOS, MUL, DIV, SEP, PTOCOMA, INT, REAL, BOOL, EOF,
	LITERALCAD, MODULO, CORABIERTO, CORCERRADO, LLAVEABIERTA, LLAVECERRADA,
	PUNTO, FLECHA, COMA, AMP, STRING, NULL, PROC, IF, THEN, ELSE, ENDIF, WHILE,
	DO, ENDWHILE, CALL, RECORD, ARRAY, OF, POINTER, NEW, DELETE, READ, WRITE,
	NL, VAR, TYPE;

//---------COMPLETAR-----------
non terminal  Programa,Decs,Dec;

Programa ::= Decs SEP Instrucciones | Instrucciones ;
Decs ::= Decs PTOCOMA Dec | Dec ;
Dec ::= VAR tipo ID | TYPE tipo ID | PROC ID ParamForm bloque;
ParamForm ::= PAP ListParamForm PCIERRE | PAP PCIERRE ;
ListParamForm ::= ListParamForm PTOCOMA Parametro | Parametro ;
Parametro ::= tipo AMP ID | tipo ID ;
bloque ::= LLAVEABIERTA Programa LLAVECERRADA ;
tipo ::= INT | BOOL | REAL | STRING | ID | ARRAY CORABIERTO NENT CORCERRADO OF tipo | RECORD LLAVE ABIERTA campos LLAVECERRADA | POINTER tipo ;


//---------Ejemplo-------------
S   ::= EVALUA E0 Ds ;
Ds  ::= DONDE LDs | ;
LDs ::= LDs COMA D | D ;
D   ::= IDEN IGUAL E0 ;
E0  ::= E0 OP0 E1  | E1 ;
E1  ::= E1 OP1 E2  | E2 ;
E2  ::= ENT  | REAL  | IDEN  | PAP E0 PCIERRE ;  
OP0 ::= MAS  | MENOS ;
OP1 ::= POR | DIV ;
