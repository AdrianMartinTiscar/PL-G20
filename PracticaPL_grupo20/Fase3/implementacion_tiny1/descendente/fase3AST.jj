options  {
  STATIC=false;
}  
PARSER_BEGIN(ConstructorAST1)
package descendente;

import procesamiento.TinyASint.Expresion;
import procesamiento.TinyASint.Dec;
import procesamiento.TinyASint.Decs;
import procesamiento.TinyASint.Programa;
import procesamiento.TinyASint.Inst;
import procesamiento.TinyASint.Instrucciones;
import procesamiento.TinyASint.Tipo;
import procesamiento.TinyASint.ParamForm;
import procesamiento.TinyASint.ListParamForm;
import procesamiento.TinyASint.Parametro;
import procesamiento.TinyASint.Campo;
import procesamiento.TinyASint.Campos;
import procesamiento.TinyASint.ParamReales ;
import procesamiento.TinyASint.ListaExpresiones ;
import procesamiento.TinyASint.StringLocalizado;
import procesamiento.TinyASint.InstOp ;
import procesamiento.TinyASint.Bloque;
import procesamiento.TinyASint.NumeroEntero;
import procesamiento.SemOps;

public class ConstructorAST1 {
	private SemOps sem = new SemOps();
}


PARSER_END(ConstructorAST1)
  TOKEN:{<#letra:["a"-"z","A"-"Z"]>}
  TOKEN:{<#digitoPositivo:["1"-"9"]>}
  TOKEN:{<#digito:<digitoPositivo>|"0">} 
  TOKEN:{<#parteEntera:<digitoPositivo> (<digito>)* |"0">} 
  TOKEN:{<#parteDecimal: (<digito>)* <digitoPositivo> |"0">}
  TOKEN: {<#parteExp:"e" <numeroEntero>|"E" <numeroEntero>>}
  TOKEN: {<pint:"int">}
  TOKEN: {<real:"real">}
  TOKEN: {<bool:"bool">}
  TOKEN: {<ptrue:"true">}
  TOKEN: {<pfalse:"false">}
  TOKEN: {<string:"string">}
  TOKEN: {<and:"and">}
  TOKEN: {<or:"or">}
  TOKEN: {<not:"not">}
  TOKEN: {<pnull:"null">}
  TOKEN: {<proc:"proc">}
  TOKEN: {<pif:"if">}
  TOKEN: {<then:"then">}
  TOKEN: {<pelse:"else">}
  TOKEN: {<endif:"endif">}
  TOKEN: {<pwhile:"while">}
  TOKEN: {<pdo:"do">}
  TOKEN: {<endwhile:"endwhile">}
  TOKEN: {<call:"call">}
  TOKEN: {<record:"record">}
  TOKEN: {<array:"array">}
  TOKEN: {<of:"of">}
  TOKEN: {<pointer:"pointer">}
  TOKEN: {<pnew:"new">}
  TOKEN: {<delete:"delete">}
  TOKEN: {<read:"read">}
  TOKEN: {<write:"write">}
  TOKEN: {<nl:"nl">}
  TOKEN: {<var:"var">}
  TOKEN: {<type:"type">}
  TOKEN: {<Separacion:"&&">}
  TOKEN: {<PtoComa:";">}
  TOKEN: {<igual:"=">}
  TOKEN: {<equiv:"==">}
  TOKEN: {<distinto:"!=">} 
  TOKEN: {<mas: "+">}
  TOKEN: {<menos: "-">}
  TOKEN:{<id:<letra>(<letra>|<digito>|"_")*>}
  TOKEN:{<numeroEntero: (["+","-"])? <parteEntera> >}
  TOKEN:{<numeroReal: (["+","-"])? <parteEntera> "." (<parteDecimal>|<parteExp>|<parteDecimal><parteExp>) >}
  TOKEN: {<literalCad:"\""(~["\b","\r","\n"])*"\"">} 

  Programa Sp() : {Programa prog;} {prog=Programa() <EOF> {return prog;}}
  Programa Programa() : {Decs decs; Instrucciones instrs;}
					{decs=Decs() <Separacion> instrs=Instrucciones() {return sem.programa_conDecs(decs, instrs);} |
					 instrs=Instrucciones() {return sem.programa_sinDecs(instrs);}}
  Decs Decs() : {Dec dec; Decs restDecs;}
				{dec=Dec() restDecs=RDecs(sem.decs_una(dec)) {return restDecs;}}
  Decs RDecs(Dec dec) : {Dec dec2; Decs restDecs;}
						   {<PtoComa> dec2=Dec() restDecs=RDecs(sem.declaracion_varias(dec, dec2)) {return restDecs;} |
						   {return dec;}}
  Dec Dec() : {Token d; Tipo tipo; Token t; ParamForm param; Bloque bloque;}
			  {d=<var> tipo=Tipo() t=<id> {return sem.dec_var(tipo, sem.str(t.image,t.beginLine,t.beginColumn));} |
			   d=<type> tipo=Tipo() t=<id> {return sem.dec_type(tipo, sem.tipoin(sem.str(t.image,t.beginLine,t.beginColumn)));} |
			   d=<proc> t=<id> param=paramForm() bloque=bloque() {return sem.dec_proc(sem.str(t.image,t.beginLine,t.beginColumn), param, bloque);}}
			   
  ParamForm paramForm() : {ParamForm param;} 
					  {"("  param=restoParamForm() {return param;}} 
  ParamForm restoParamForm() : {ListParamForm paramL;}
						{paramL=listParamForm() ")" {return sem.param_form(paramL);} |
						 ")" {return sem.param_form_vacio()}} 
  ListParamForm listParamForm() : {Parametro par; ListParamForm resto;}
						{par=parametro() resto=restoListaParamForm(sem.list_param_form_uno(par)) {return resto;}}
  ListParamForm restoListaParamForm(Parametro p) : {Parametro p2; ListParamForm l;}
						{<PtoComa> p2=parametro() l=restoListaParamForm(sem.list_param_form_varios(p, p2)) {return lista;}|
						 {return p;}}
  Parametro parametro() : {Tipo tipo; Parametro r;}
						{tipo=Tipo() r=restoParametro(tipo) {return r;}}
  Parametro restoParametro(Tipo tipo) : {Token id;}
						{"&" id=<id> {return sem.param_variable(tipo, id);} |
						 id=<id> {return sem.param_valor(tipo, id);}}

 
  Bloque bloque() : {Bloque blo;}
				    {"{" blo=resbloque() "}" {return blo;}}
  Bloque resbloque() : {Programa prog;}
					   {prog=Programa() {return sem.bloque(prog);} |
					    {return sem.bloque_vacio();}}
						
  Tipo tipo() : {Token i; Token num; Campos campos; Tipo t;}
				{<pint> {return sem.tipo_int();} |
				<bool> {return sem.tipo_bool();} |
				<real> {return sem.tipo_real();} |
				<string> {return sem.tipo_string();} |
				i=<id> {return sem.tipoin(sem.str(i.image,i.beginLine,i.beginColumn));}|
				i=<array> "[" num=<numeroEntero> "]" <of> tipo=Tipo() {return sem.tipo_array(sem.str(num.image,num.beginLine,num.beginColumn), tipo);} |
				i=<record> "{" campos=campos() "}" {return sem.tipo_record(campos);}|
				i=<pointer> t=Tipo() {return sem.tipo_pointer(t);}}


  void campos()			: {} {campo() RCampos()}
  void RCampos()		: {} {<PtoComa> campo() RCampos() | {}}
  void campo()			: {} {tipo() <id>}
  void Instrucciones()	: {} {Inst() RInstrucciones()}
  void RInstrucciones()	: {} {<PtoComa> Inst() RInstrucciones() | {}}
  void Inst()			: {} {Expresion() <igual> Expresion() | <pif> Expresion() <then> InstOp() RIf() | <pwhile> Expresion() <pdo> InstOp() <endwhile> | <read> Expresion() | <write> Expresion() | <nl> | <pnew> Expresion() | <delete> Expresion() | <call> <id> paramReales() | bloque()}
  void RIf()			: {} {<endif> | <pelse> InstOp() <endif>}
  void InstOp()			: {} {Instrucciones() | {}}
  void paramReales()	: {} {"(" RparamReales() ")"}
  void RparamReales()	: {} {ListaExpresiones() | {}}
  void ListaExpresiones() : {} {Expresion() RListaExpresiones()}
  void RListaExpresiones(): {} {"," Expresion() RListaExpresiones () | {}}
  void Expresion()		: {} {E0()}
  void E0()			: {} {E1() RE0()}
  void RE0()			: {} {<mas> E0() | <menos> E1() | {}}
  void E1()			: {} {E2() RE1()}
  void RE1()			: {} {OP1() E2() RE1() | {}}
  void E2()			: {} {E3() RE2()}
  void RE2()			: {} {OP2() E3() RE2() | {}}
  void E3()			: {} {E4() RE3()}
  void RE3()			: {} {OP3() E4() | {}}
  void E4()			: {} {<menos> E5() | <not> E4() | E5()}
  void E5()			: {} {E6() RE5()}
  void RE5()			: {} {OP5() RE5() | {}}
  void E6()			: {} {"*" E6() | E7()} 
  void E7()			: {} {<numeroEntero> | <numeroReal> | <id> | <ptrue> | <pfalse> | <literalCad> | <pnull> | "(" E0() ")"}
  void OP1()			: {} {<and> | <or>}
  void OP2()			: {} {"<" ROP2() | ">" ROP2() | <equiv> | <distinto>}
  void ROP2()			: {} {<igual>| {}}
  void OP3()			: {} {"*" | "/" | "%"}
  void OP5()			: {} {"[" Expresion() "]" | "." <id> | "->" <id>}
