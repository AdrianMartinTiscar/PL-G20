
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package AAscendente_Tiny1.analizadorSintactico;

import java_cup.runtime.*;
import AAscendente_Tiny1.implementacion_jflex.AnalizadorLexicoTiny1;
import AAscendente_Tiny1.implementacion_jflex.UnidadLexica;
import AAscendente_Tiny1.gestionErroresTiny.GestionErr;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ClaseLexica.class;
}

  /** Default constructor. */
  
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
 
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\005\000\002\002\004\000\002\002" +
    "\003\000\002\003\005\000\002\003\003\000\002\004\005" +
    "\000\002\004\005\000\002\004\006\000\002\005\005\000" +
    "\002\005\004\000\002\006\005\000\002\006\003\000\002" +
    "\007\005\000\002\007\004\000\002\010\005\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\010\000\002\011\006\000" +
    "\002\011\004\000\002\012\005\000\002\012\003\000\002" +
    "\013\004\000\002\014\005\000\002\014\003\000\002\015" +
    "\005\000\002\015\007\000\002\015\011\000\002\015\007" +
    "\000\002\015\004\000\002\015\004\000\002\015\003\000" +
    "\002\015\004\000\002\015\004\000\002\015\005\000\002" +
    "\015\003\000\002\016\003\000\002\016\002\000\002\017" +
    "\005\000\002\017\004\000\002\020\005\000\002\020\003" +
    "\000\002\021\003\000\002\022\005\000\002\022\005\000" +
    "\002\022\003\000\002\023\005\000\002\023\003\000\002" +
    "\024\005\000\002\024\003\000\002\025\005\000\002\025" +
    "\003\000\002\026\004\000\002\026\004\000\002\026\003" +
    "\000\002\027\004\000\002\027\003\000\002\030\004\000" +
    "\002\030\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\005\000\002\032\003" +
    "\000\002\032\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\035\005\000\002\035\004\000\002\035\004" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\060\004\015\005\030\006\011\007\027\012" +
    "\017\013\040\016\010\026\022\027\021\036\026\042\025" +
    "\051\023\052\036\053\014\057\035\062\013\067\020\070" +
    "\005\071\034\072\006\073\032\074\047\075\012\001\002" +
    "\000\006\031\ufffd\032\ufffd\001\002\000\030\004\015\005" +
    "\030\006\011\007\027\012\017\013\040\016\010\026\022" +
    "\027\021\036\026\051\023\001\002\000\030\004\015\005" +
    "\030\006\011\007\027\012\017\013\040\016\010\026\022" +
    "\027\021\036\026\051\023\001\002\000\016\002\uffdb\032" +
    "\uffdb\043\uffdb\055\uffdb\056\uffdb\061\uffdb\001\002\000\030" +
    "\004\015\005\030\006\011\007\027\012\017\013\040\016" +
    "\010\026\022\027\021\036\026\051\023\001\002\000\070" +
    "\002\uffc2\010\uffc2\011\uffc2\014\uffc2\015\uffc2\017\uffc2\020" +
    "\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2" +
    "\027\uffc2\030\uffc2\032\uffc2\037\uffc2\040\uffc2\041\uffc2\043" +
    "\uffc2\044\uffc2\045\uffc2\054\uffc2\055\uffc2\056\uffc2\060\uffc2" +
    "\061\uffc2\001\002\000\022\004\077\033\072\034\101\035" +
    "\073\050\076\063\075\064\074\066\100\001\002\000\004" +
    "\004\212\001\002\000\030\004\015\005\030\006\011\007" +
    "\027\012\017\013\040\016\010\026\022\027\021\036\026" +
    "\051\023\001\002\000\070\002\uffc1\010\uffc1\011\uffc1\014" +
    "\uffc1\015\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1" +
    "\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\032\uffc1\037" +
    "\uffc1\040\uffc1\041\uffc1\043\uffc1\044\uffc1\045\uffc1\054\uffc1" +
    "\055\uffc1\056\uffc1\060\uffc1\061\uffc1\001\002\000\016\002" +
    "\uffe6\032\uffe6\043\uffe6\055\uffe6\056\uffe6\061\uffe6\001\002" +
    "\000\070\002\uffc0\010\uffc0\011\uffc0\014\uffc0\015\uffc0\017" +
    "\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0" +
    "\026\uffc0\027\uffc0\030\uffc0\032\uffc0\037\uffc0\040\uffc0\041" +
    "\uffc0\043\uffc0\044\uffc0\045\uffc0\054\uffc0\055\uffc0\056\uffc0" +
    "\060\uffc0\061\uffc0\001\002\000\030\004\015\005\030\006" +
    "\011\007\027\012\017\013\040\016\010\026\022\027\021" +
    "\036\026\051\023\001\002\000\024\004\015\005\030\006" +
    "\011\007\027\012\017\013\040\027\021\036\026\051\023" +
    "\001\002\000\024\004\015\005\030\006\011\007\027\012" +
    "\017\013\040\027\021\036\026\051\023\001\002\000\070" +
    "\002\uffbd\010\uffbd\011\uffbd\014\uffbd\015\uffbd\017\uffbd\020" +
    "\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd" +
    "\027\uffbd\030\uffbd\032\uffbd\037\uffbd\040\uffbd\041\uffbd\043" +
    "\uffbd\044\uffbd\045\uffbd\054\uffbd\055\uffbd\056\uffbd\060\uffbd" +
    "\061\uffbd\001\002\000\004\002\177\001\002\000\060\004" +
    "\015\005\030\006\011\007\027\012\017\013\040\016\010" +
    "\026\022\027\021\036\026\042\025\051\023\052\036\053" +
    "\014\057\035\062\013\067\020\070\005\071\034\072\006" +
    "\073\032\074\047\075\012\001\002\000\070\002\uffbe\010" +
    "\uffbe\011\uffbe\014\uffbe\015\uffbe\017\uffbe\020\uffbe\021\uffbe" +
    "\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030" +
    "\uffbe\032\uffbe\037\uffbe\040\uffbe\041\uffbe\043\uffbe\044\uffbe" +
    "\045\uffbe\054\uffbe\055\uffbe\056\uffbe\060\uffbe\061\uffbe\001" +
    "\002\000\030\004\015\005\030\006\011\007\027\012\017" +
    "\013\040\016\010\026\022\027\021\036\026\051\023\001" +
    "\002\000\070\002\uffc3\010\uffc3\011\uffc3\014\uffc3\015\uffc3" +
    "\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025" +
    "\uffc3\026\uffc3\027\uffc3\030\uffc3\032\uffc3\037\uffc3\040\uffc3" +
    "\041\uffc3\043\uffc3\044\uffc3\045\uffc3\054\uffc3\055\uffc3\056" +
    "\uffc3\060\uffc3\061\uffc3\001\002\000\006\031\167\032\170" +
    "\001\002\000\016\002\uffdf\032\uffdf\043\uffdf\055\uffdf\056" +
    "\uffdf\061\uffdf\001\002\000\010\002\uffff\032\163\043\uffff" +
    "\001\002\000\030\004\015\005\030\006\011\007\027\012" +
    "\017\013\040\016\010\026\022\027\021\036\026\051\023" +
    "\001\002\000\030\004\015\005\030\006\011\007\027\012" +
    "\017\013\040\016\010\026\022\027\021\036\026\051\023" +
    "\001\002\000\004\004\141\001\002\000\070\002\uffc4\010" +
    "\uffc4\011\uffc4\014\uffc4\015\uffc4\017\uffc4\020\uffc4\021\uffc4" +
    "\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030" +
    "\uffc4\032\uffc4\037\uffc4\040\uffc4\041\uffc4\043\uffc4\044\uffc4" +
    "\045\uffc4\054\uffc4\055\uffc4\056\uffc4\060\uffc4\061\uffc4\001" +
    "\002\000\070\002\uffbf\010\uffbf\011\uffbf\014\uffbf\015\uffbf" +
    "\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025" +
    "\uffbf\026\uffbf\027\uffbf\030\uffbf\032\uffbf\037\uffbf\040\uffbf" +
    "\041\uffbf\043\uffbf\044\uffbf\045\uffbf\054\uffbf\055\uffbf\056" +
    "\uffbf\060\uffbf\061\uffbf\001\002\000\070\002\uffc6\010\uffc6" +
    "\011\uffc6\014\uffc6\015\uffc6\017\uffc6\020\uffc6\021\uffc6\022" +
    "\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6" +
    "\032\uffc6\037\uffc6\040\uffc6\041\uffc6\043\uffc6\044\uffc6\045" +
    "\uffc6\054\uffc6\055\uffc6\056\uffc6\060\uffc6\061\uffc6\001\002" +
    "\000\070\002\uffc8\010\uffc8\011\uffc8\014\uffc8\015\uffc8\017" +
    "\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8" +
    "\026\uffc8\027\uffc8\030\uffc8\032\uffc8\037\uffc8\040\133\041" +
    "\uffc8\043\uffc8\044\132\045\131\054\uffc8\055\uffc8\056\uffc8" +
    "\060\uffc8\061\uffc8\001\002\000\062\002\uffcb\010\uffcb\011" +
    "\uffcb\014\uffcb\015\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb" +
    "\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\126\030\127\032" +
    "\uffcb\037\125\041\uffcb\043\uffcb\054\uffcb\055\uffcb\056\uffcb" +
    "\060\uffcb\061\uffcb\001\002\000\054\002\uffcd\010\uffcd\011" +
    "\uffcd\014\uffcd\015\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd" +
    "\023\uffcd\024\uffcd\025\uffcd\026\uffcd\032\uffcd\041\uffcd\043" +
    "\uffcd\054\uffcd\055\uffcd\056\uffcd\060\uffcd\061\uffcd\001\002" +
    "\000\004\011\122\001\002\000\054\002\uffcf\010\uffcf\011" +
    "\uffcf\014\uffcf\015\uffcf\017\065\020\061\021\066\022\062" +
    "\023\067\024\064\025\uffcf\026\uffcf\032\uffcf\041\uffcf\043" +
    "\uffcf\054\uffcf\055\uffcf\056\uffcf\060\uffcf\061\uffcf\001\002" +
    "\000\022\004\077\033\072\034\101\035\073\050\076\063" +
    "\075\064\074\066\100\001\002\000\040\002\uffd1\010\uffd1" +
    "\011\uffd1\014\053\015\056\025\052\026\055\032\uffd1\041" +
    "\uffd1\043\uffd1\054\uffd1\055\uffd1\056\uffd1\060\uffd1\061\uffd1" +
    "\001\002\000\030\002\uffd4\010\uffd4\011\uffd4\032\uffd4\041" +
    "\uffd4\043\uffd4\054\uffd4\055\uffd4\056\uffd4\060\uffd4\061\uffd4" +
    "\001\002\000\030\004\015\005\030\006\011\007\027\012" +
    "\017\013\040\016\010\026\022\027\021\036\026\051\023" +
    "\001\002\000\030\004\uffbb\005\uffbb\006\uffbb\007\uffbb\012" +
    "\uffbb\013\uffbb\016\uffbb\026\uffbb\027\uffbb\036\uffbb\051\uffbb" +
    "\001\002\000\030\004\015\005\030\006\011\007\027\012" +
    "\017\013\040\016\010\026\022\027\021\036\026\051\023" +
    "\001\002\000\030\004\015\005\030\006\011\007\027\012" +
    "\017\013\040\016\010\026\022\027\021\036\026\051\023" +
    "\001\002\000\030\004\uffba\005\uffba\006\uffba\007\uffba\012" +
    "\uffba\013\uffba\016\uffba\026\uffba\027\uffba\036\uffba\051\uffba" +
    "\001\002\000\034\002\uffd2\010\uffd2\011\uffd2\014\053\015" +
    "\056\032\uffd2\041\uffd2\043\uffd2\054\uffd2\055\uffd2\056\uffd2" +
    "\060\uffd2\061\uffd2\001\002\000\054\002\uffd0\010\uffd0\011" +
    "\uffd0\014\uffd0\015\uffd0\017\065\020\061\021\066\022\062" +
    "\023\067\024\064\025\uffd0\026\uffd0\032\uffd0\041\uffd0\043" +
    "\uffd0\054\uffd0\055\uffd0\056\uffd0\060\uffd0\061\uffd0\001\002" +
    "\000\030\004\uffb6\005\uffb6\006\uffb6\007\uffb6\012\uffb6\013" +
    "\uffb6\016\uffb6\026\uffb6\027\uffb6\036\uffb6\051\uffb6\001\002" +
    "\000\030\004\uffb8\005\uffb8\006\uffb8\007\uffb8\012\uffb8\013" +
    "\uffb8\016\uffb8\026\uffb8\027\uffb8\036\uffb8\051\uffb8\001\002" +
    "\000\030\004\015\005\030\006\011\007\027\012\017\013" +
    "\040\016\010\026\022\027\021\036\026\051\023\001\002" +
    "\000\030\004\uffb4\005\uffb4\006\uffb4\007\uffb4\012\uffb4\013" +
    "\uffb4\016\uffb4\026\uffb4\027\uffb4\036\uffb4\051\uffb4\001\002" +
    "\000\030\004\uffb7\005\uffb7\006\uffb7\007\uffb7\012\uffb7\013" +
    "\uffb7\016\uffb7\026\uffb7\027\uffb7\036\uffb7\051\uffb7\001\002" +
    "\000\030\004\uffb9\005\uffb9\006\uffb9\007\uffb9\012\uffb9\013" +
    "\uffb9\016\uffb9\026\uffb9\027\uffb9\036\uffb9\051\uffb9\001\002" +
    "\000\030\004\uffb5\005\uffb5\006\uffb5\007\uffb5\012\uffb5\013" +
    "\uffb5\016\uffb5\026\uffb5\027\uffb5\036\uffb5\051\uffb5\001\002" +
    "\000\054\002\uffce\010\uffce\011\uffce\014\uffce\015\uffce\017" +
    "\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce" +
    "\026\uffce\032\uffce\041\uffce\043\uffce\054\uffce\055\uffce\056" +
    "\uffce\060\uffce\061\uffce\001\002\000\030\002\uffd3\010\uffd3" +
    "\011\uffd3\032\uffd3\041\uffd3\043\uffd3\054\uffd3\055\uffd3\056" +
    "\uffd3\060\uffd3\061\uffd3\001\002\000\006\004\ufff2\047\ufff2" +
    "\001\002\000\006\004\ufff1\047\ufff1\001\002\000\004\040" +
    "\115\001\002\000\004\042\105\001\002\000\006\004\uffef" +
    "\047\uffef\001\002\000\006\004\uffee\047\uffee\001\002\000" +
    "\022\004\077\033\072\034\101\035\073\050\076\063\075" +
    "\064\074\066\100\001\002\000\006\004\ufff0\047\ufff0\001" +
    "\002\000\004\004\103\001\002\000\006\031\ufffc\032\ufffc" +
    "\001\002\000\006\004\uffeb\047\uffeb\001\002\000\022\004" +
    "\077\033\072\034\101\035\073\050\076\063\075\064\074" +
    "\066\100\001\002\000\006\032\112\043\113\001\002\000" +
    "\004\004\111\001\002\000\006\032\uffe9\043\uffe9\001\002" +
    "\000\006\032\uffe8\043\uffe8\001\002\000\022\004\077\033" +
    "\072\034\101\035\073\050\076\063\075\064\074\066\100" +
    "\001\002\000\006\004\uffec\047\uffec\001\002\000\006\032" +
    "\uffea\043\uffea\001\002\000\004\005\116\001\002\000\004" +
    "\041\117\001\002\000\004\065\120\001\002\000\022\004" +
    "\077\033\072\034\101\035\073\050\076\063\075\064\074" +
    "\066\100\001\002\000\006\004\uffed\047\uffed\001\002\000" +
    "\030\004\015\005\030\006\011\007\027\012\017\013\040" +
    "\016\010\026\022\027\021\036\026\051\023\001\002\000" +
    "\016\002\uffe5\032\uffe5\043\uffe5\055\uffe5\056\uffe5\061\uffe5" +
    "\001\002\000\030\004\015\005\030\006\011\007\027\012" +
    "\017\013\040\016\010\026\022\027\021\036\026\051\023" +
    "\001\002\000\030\004\uffb1\005\uffb1\006\uffb1\007\uffb1\012" +
    "\uffb1\013\uffb1\016\uffb1\026\uffb1\027\uffb1\036\uffb1\051\uffb1" +
    "\001\002\000\030\004\uffb3\005\uffb3\006\uffb3\007\uffb3\012" +
    "\uffb3\013\uffb3\016\uffb3\026\uffb3\027\uffb3\036\uffb3\051\uffb3" +
    "\001\002\000\030\004\uffb2\005\uffb2\006\uffb2\007\uffb2\012" +
    "\uffb2\013\uffb2\016\uffb2\026\uffb2\027\uffb2\036\uffb2\051\uffb2" +
    "\001\002\000\054\002\uffcc\010\uffcc\011\uffcc\014\uffcc\015" +
    "\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc" +
    "\025\uffcc\026\uffcc\032\uffcc\041\uffcc\043\uffcc\054\uffcc\055" +
    "\uffcc\056\uffcc\060\uffcc\061\uffcc\001\002\000\004\004\140" +
    "\001\002\000\004\004\137\001\002\000\030\004\015\005" +
    "\030\006\011\007\027\012\017\013\040\016\010\026\022" +
    "\027\021\036\026\051\023\001\002\000\070\002\uffc7\010" +
    "\uffc7\011\uffc7\014\uffc7\015\uffc7\017\uffc7\020\uffc7\021\uffc7" +
    "\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030" +
    "\uffc7\032\uffc7\037\uffc7\040\uffc7\041\uffc7\043\uffc7\044\uffc7" +
    "\045\uffc7\054\uffc7\055\uffc7\056\uffc7\060\uffc7\061\uffc7\001" +
    "\002\000\004\041\136\001\002\000\070\002\uffb0\010\uffb0" +
    "\011\uffb0\014\uffb0\015\uffb0\017\uffb0\020\uffb0\021\uffb0\022" +
    "\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0" +
    "\032\uffb0\037\uffb0\040\uffb0\041\uffb0\043\uffb0\044\uffb0\045" +
    "\uffb0\054\uffb0\055\uffb0\056\uffb0\060\uffb0\061\uffb0\001\002" +
    "\000\070\002\uffaf\010\uffaf\011\uffaf\014\uffaf\015\uffaf\017" +
    "\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf" +
    "\026\uffaf\027\uffaf\030\uffaf\032\uffaf\037\uffaf\040\uffaf\041" +
    "\uffaf\043\uffaf\044\uffaf\045\uffaf\054\uffaf\055\uffaf\056\uffaf" +
    "\060\uffaf\061\uffaf\001\002\000\070\002\uffae\010\uffae\011" +
    "\uffae\014\uffae\015\uffae\017\uffae\020\uffae\021\uffae\022\uffae" +
    "\023\uffae\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae\032" +
    "\uffae\037\uffae\040\uffae\041\uffae\043\uffae\044\uffae\045\uffae" +
    "\054\uffae\055\uffae\056\uffae\060\uffae\061\uffae\001\002\000" +
    "\004\007\143\001\002\000\004\042\025\001\002\000\024" +
    "\004\077\010\145\033\072\034\101\035\073\050\076\063" +
    "\075\064\074\066\100\001\002\000\006\010\ufff6\046\ufff6" +
    "\001\002\000\004\042\ufff8\001\002\000\006\004\154\047" +
    "\153\001\002\000\006\010\151\046\150\001\002\000\022" +
    "\004\077\033\072\034\101\035\073\050\076\063\075\064" +
    "\074\066\100\001\002\000\004\042\ufff9\001\002\000\006" +
    "\010\ufff7\046\ufff7\001\002\000\004\004\155\001\002\000" +
    "\006\010\ufff4\046\ufff4\001\002\000\006\010\ufff5\046\ufff5" +
    "\001\002\000\006\031\ufffa\032\ufffa\001\002\000\004\060" +
    "\160\001\002\000\054\004\015\005\030\006\011\007\027" +
    "\012\017\013\040\016\010\026\022\027\021\036\026\042" +
    "\025\051\023\053\014\057\035\061\uffd9\062\013\067\020" +
    "\070\005\071\034\072\006\073\032\001\002\000\004\061" +
    "\165\001\002\000\012\032\163\055\uffda\056\uffda\061\uffda" +
    "\001\002\000\052\004\015\005\030\006\011\007\027\012" +
    "\017\013\040\016\010\026\022\027\021\036\026\042\025" +
    "\051\023\053\014\057\035\062\013\067\020\070\005\071" +
    "\034\072\006\073\032\001\002\000\016\002\uffe7\032\uffe7" +
    "\043\uffe7\055\uffe7\056\uffe7\061\uffe7\001\002\000\016\002" +
    "\uffe2\032\uffe2\043\uffe2\055\uffe2\056\uffe2\061\uffe2\001\002" +
    "\000\016\002\uffe1\032\uffe1\043\uffe1\055\uffe1\056\uffe1\061" +
    "\uffe1\001\002\000\052\004\015\005\030\006\011\007\027" +
    "\012\017\013\040\016\010\026\022\027\021\036\026\042" +
    "\025\051\023\053\014\057\035\062\013\067\020\070\005" +
    "\071\034\072\006\073\032\001\002\000\010\052\036\074" +
    "\047\075\012\001\002\000\006\031\ufffe\032\ufffe\001\002" +
    "\000\010\002\001\032\163\043\001\001\002\000\004\010" +
    "\174\001\002\000\070\002\uffbc\010\uffbc\011\uffbc\014\uffbc" +
    "\015\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024" +
    "\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\032\uffbc\037\uffbc" +
    "\040\uffbc\041\uffbc\043\uffbc\044\uffbc\045\uffbc\054\uffbc\055" +
    "\uffbc\056\uffbc\060\uffbc\061\uffbc\001\002\000\004\043\176" +
    "\001\002\000\020\002\ufff3\031\ufff3\032\ufff3\043\ufff3\055" +
    "\ufff3\056\ufff3\061\ufff3\001\002\000\004\002\000\001\002" +
    "\000\070\002\uffca\010\uffca\011\uffca\014\uffca\015\uffca\017" +
    "\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca" +
    "\026\uffca\027\uffca\030\uffca\032\uffca\037\uffca\040\133\041" +
    "\uffca\043\uffca\044\132\045\131\054\uffca\055\uffca\056\uffca" +
    "\060\uffca\061\uffca\001\002\000\070\002\uffc5\010\uffc5\011" +
    "\uffc5\014\uffc5\015\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5" +
    "\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\032" +
    "\uffc5\037\uffc5\040\uffc5\041\uffc5\043\uffc5\044\uffc5\045\uffc5" +
    "\054\uffc5\055\uffc5\056\uffc5\060\uffc5\061\uffc5\001\002\000" +
    "\016\002\uffde\032\uffde\043\uffde\055\uffde\056\uffde\061\uffde" +
    "\001\002\000\004\054\204\001\002\000\056\004\015\005" +
    "\030\006\011\007\027\012\017\013\040\016\010\026\022" +
    "\027\021\036\026\042\025\051\023\053\014\055\uffd9\056" +
    "\uffd9\057\035\062\013\067\020\070\005\071\034\072\006" +
    "\073\032\001\002\000\006\055\206\056\207\001\002\000" +
    "\054\004\015\005\030\006\011\007\027\012\017\013\040" +
    "\016\010\026\022\027\021\036\026\042\025\051\023\053" +
    "\014\056\uffd9\057\035\062\013\067\020\070\005\071\034" +
    "\072\006\073\032\001\002\000\016\002\uffe4\032\uffe4\043" +
    "\uffe4\055\uffe4\056\uffe4\061\uffe4\001\002\000\004\056\211" +
    "\001\002\000\016\002\uffe3\032\uffe3\043\uffe3\055\uffe3\056" +
    "\uffe3\061\uffe3\001\002\000\004\007\213\001\002\000\032" +
    "\004\015\005\030\006\011\007\027\010\215\012\017\013" +
    "\040\016\010\026\022\027\021\036\026\051\023\001\002" +
    "\000\016\002\uffdc\032\uffdc\043\uffdc\055\uffdc\056\uffdc\061" +
    "\uffdc\001\002\000\016\002\uffd7\032\uffd7\043\uffd7\055\uffd7" +
    "\056\uffd7\061\uffd7\001\002\000\006\010\uffd5\032\uffd5\001" +
    "\002\000\006\010\220\032\221\001\002\000\016\002\uffd8" +
    "\032\uffd8\043\uffd8\055\uffd8\056\uffd8\061\uffd8\001\002\000" +
    "\030\004\015\005\030\006\011\007\027\012\017\013\040" +
    "\016\010\026\022\027\021\036\026\051\023\001\002\000" +
    "\006\010\uffd6\032\uffd6\001\002\000\004\004\224\001\002" +
    "\000\006\031\ufffb\032\ufffb\001\002\000\062\002\uffc9\010" +
    "\uffc9\011\uffc9\014\uffc9\015\uffc9\017\uffc9\020\uffc9\021\uffc9" +
    "\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030" +
    "\uffc9\032\uffc9\037\uffc9\041\uffc9\043\uffc9\054\uffc9\055\uffc9" +
    "\056\uffc9\060\uffc9\061\uffc9\001\002\000\016\002\uffe0\032" +
    "\uffe0\043\uffe0\055\uffe0\056\uffe0\061\uffe0\001\002\000\016" +
    "\002\uffdd\032\uffdd\043\uffdd\055\uffdd\056\uffdd\061\uffdd\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\040\002\023\003\030\004\003\010\006\014" +
    "\032\015\015\021\044\022\050\023\047\024\045\025\043" +
    "\026\042\027\041\030\040\031\036\001\001\000\002\001" +
    "\001\000\024\021\226\022\050\023\047\024\045\025\043" +
    "\026\042\027\041\030\040\031\036\001\001\000\024\021" +
    "\225\022\050\023\047\024\045\025\043\026\042\027\041" +
    "\030\040\031\036\001\001\000\002\001\001\000\012\026" +
    "\224\027\041\030\040\031\036\001\001\000\002\001\001" +
    "\000\004\011\222\001\001\000\002\001\001\000\024\021" +
    "\202\022\050\023\047\024\045\025\043\026\042\027\041" +
    "\030\040\031\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\021\201\022\050\023\047" +
    "\024\045\025\043\026\042\027\041\030\040\031\036\001" +
    "\001\000\006\030\200\031\036\001\001\000\010\027\177" +
    "\030\040\031\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\002\174\003\030\004\003\010\006\014\032" +
    "\015\015\021\044\022\050\023\047\024\045\025\043\026" +
    "\042\027\041\030\040\031\036\001\001\000\002\001\001" +
    "\000\022\022\172\023\047\024\045\025\043\026\042\027" +
    "\041\030\040\031\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\021" +
    "\165\022\050\023\047\024\045\025\043\026\042\027\041" +
    "\030\040\031\036\001\001\000\024\021\156\022\050\023" +
    "\047\024\045\025\043\026\042\027\041\030\040\031\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\133\001\001\000\004" +
    "\034\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\062\001\001\000\004\011\101\001\001\000\004" +
    "\032\053\001\001\000\002\001\001\000\022\022\070\023" +
    "\047\024\045\025\043\026\042\027\041\030\040\031\036" +
    "\001\001\000\002\001\001\000\016\024\057\025\043\026" +
    "\042\027\041\030\040\031\036\001\001\000\020\023\056" +
    "\024\045\025\043\026\042\027\041\030\040\031\036\001" +
    "\001\000\002\001\001\000\004\032\053\001\001\000\004" +
    "\033\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\025\067\026\042\027\041\030\040\031\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\106\012\105\013\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\106\013\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\120\001\001" +
    "\000\002\001\001\000\024\021\122\022\050\023\047\024" +
    "\045\025\043\026\042\027\041\030\040\031\036\001\001" +
    "\000\002\001\001\000\012\026\127\027\041\030\040\031" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\021\134\022\050\023\047\024\045\025\043" +
    "\026\042\027\041\030\040\031\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\141\001\001\000\004\010" +
    "\155\001\001\000\010\006\146\007\143\011\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\151\011\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\010\006\014\161\015\015\016\160\021\044\022" +
    "\050\023\047\024\045\025\043\026\042\027\041\030\040" +
    "\031\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\010\006\015\163\021\044\022\050\023\047\024\045" +
    "\025\043\026\042\027\041\030\040\031\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\010\006\014\171\015\015\021\044\022\050\023\047\024" +
    "\045\025\043\026\042\027\041\030\040\031\036\001\001" +
    "\000\004\004\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\010\006\014\161\015\015\016\204\021\044\022" +
    "\050\023\047\024\045\025\043\026\042\027\041\030\040" +
    "\031\036\001\001\000\002\001\001\000\034\010\006\014" +
    "\161\015\015\016\207\021\044\022\050\023\047\024\045" +
    "\025\043\026\042\027\041\030\040\031\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\213\001\001\000\026\020\216\021\215\022\050\023" +
    "\047\024\045\025\043\026\042\027\041\030\040\031\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\021\221" +
    "\022\050\023\047\024\045\025\043\026\042\027\041\030" +
    "\040\031\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErr();
   AnalizadorLexicoTiny1 alex = (AnalizadorLexicoTiny1)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErr errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= Decs SEP Instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Programa ::= Instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decs ::= Decs PTOCOMA Dec 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Decs",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decs ::= Dec 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Decs",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Dec ::= VAR tipo ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Dec",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Dec ::= TYPE tipo ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Dec",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Dec ::= PROC ID ParamForm bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Dec",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ParamForm ::= PAP ListParamForm PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParamForm",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ParamForm ::= PAP PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParamForm",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ListParamForm ::= ListParamForm COMA Parametro 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListParamForm",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ListParamForm ::= Parametro 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListParamForm",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Parametro ::= tipo AMP ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Parametro",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Parametro ::= tipo ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Parametro",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // bloque ::= LLAVEABIERTA Programa LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("bloque",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo ::= REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo ::= STRING 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo ::= ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo ::= ARRAY CORABIERTO NENT CORCERRADO OF tipo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo ::= RECORD LLAVEABIERTA campos LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo ::= POINTER tipo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // campos ::= campos PTOCOMA campo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("campos",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // campos ::= campo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("campos",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // campo ::= tipo ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("campo",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Instrucciones ::= Instrucciones PTOCOMA Inst 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrucciones",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Instrucciones ::= Inst 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrucciones",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Inst ::= Expresion IGUAL Expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Inst ::= IF Expresion THEN InstOp ENDIF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Inst ::= IF Expresion THEN InstOp ELSE InstOp ENDIF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Inst ::= WHILE Expresion DO InstOp ENDWHILE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Inst ::= READ Expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Inst ::= WRITE Expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Inst ::= NL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Inst ::= NEW Expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Inst ::= DELETE Expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Inst ::= CALL ID paramReales 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Inst ::= bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // InstOp ::= Instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InstOp",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // InstOp ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InstOp",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // paramReales ::= PAP ListaExpresiones PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("paramReales",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // paramReales ::= PAP PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("paramReales",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ListaExpresiones ::= ListaExpresiones PTOCOMA Expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaExpresiones",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ListaExpresiones ::= Expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaExpresiones",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expresion ::= E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Expresion",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // E0 ::= E1 MAS E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // E0 ::= E1 MENOS E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E0 ::= E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E1 ::= E1 OP1 E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E1 ::= E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E2 ::= E2 OP2 E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E2 ::= E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E3 ::= E4 OP3 E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E3 ::= E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E4 ::= MENOS E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E4 ::= NOT E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E4 ::= E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E5 ::= E5 OP5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E5 ::= E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E6 ::= MUL E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E6 ::= E7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E7 ::= NENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E7 ::= NREAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E7 ::= ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E7 ::= TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E7 ::= FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E7 ::= LITERALCAD 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E7 ::= NULL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E7 ::= PAP E0 PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OP1 ::= AND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OP1 ::= OR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OP2 ::= MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP2 ::= MAYORIGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP2 ::= MENOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OP2 ::= MENORIGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OP2 ::= COMPARACION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OP2 ::= DISTINTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OP3 ::= MUL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP3",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OP3 ::= DIV 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP3",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OP3 ::= MODULO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP3",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OP5 ::= CORABIERTO Expresion CORCERRADO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP5",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OP5 ::= PUNTO ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP5",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OP5 ::= FLECHA ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP5",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

}
