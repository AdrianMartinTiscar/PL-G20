
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ascendente.analizadorSintactico;

import java_cup.runtime.*;
import ascendente.analizadorLexico.AnalizadorLexicoTiny1;
import ascendente.analizadorLexico.UnidadLexica;
import ascendente.gestionErroresTiny.GestionErr;
import procesamiento.SemOps;
import procesamiento.TinyASint.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ClaseLexica.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\005\000\002\002\004\000\002\002" +
    "\003\000\002\003\005\000\002\003\003\000\002\004\005" +
    "\000\002\004\005\000\002\004\006\000\002\005\005\000" +
    "\002\005\004\000\002\007\005\000\002\007\003\000\002" +
    "\006\005\000\002\006\004\000\002\010\005\000\002\010" +
    "\004\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\010\000" +
    "\002\011\006\000\002\011\004\000\002\015\005\000\002" +
    "\015\003\000\002\016\004\000\002\017\005\000\002\017" +
    "\003\000\002\020\005\000\002\020\007\000\002\020\011" +
    "\000\002\021\003\000\002\021\002\000\002\020\007\000" +
    "\002\020\004\000\002\020\004\000\002\020\003\000\002" +
    "\020\004\000\002\020\004\000\002\020\005\000\002\020" +
    "\003\000\002\022\005\000\002\022\004\000\002\023\005" +
    "\000\002\023\003\000\002\024\003\000\002\025\005\000" +
    "\002\025\005\000\002\025\003\000\002\026\005\000\002" +
    "\026\003\000\002\027\005\000\002\027\003\000\002\030" +
    "\005\000\002\030\003\000\002\031\004\000\002\031\004" +
    "\000\002\031\003\000\002\032\006\000\002\032\005\000" +
    "\002\032\005\000\002\032\003\000\002\033\004\000\002" +
    "\033\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\005\000\002\035\003\000" +
    "\002\035\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\062\004\030\007\020\010\041\013\011\023" +
    "\023\024\022\036\026\037\010\045\024\046\037\047\015" +
    "\053\036\056\014\063\021\064\006\065\035\066\005\067" +
    "\033\070\050\071\013\072\016\073\027\074\031\075\012" +
    "\001\002\000\006\026\ufffd\027\ufffd\001\002\000\030\004" +
    "\030\007\020\010\041\013\011\023\023\024\022\045\024" +
    "\072\016\073\027\074\031\075\012\001\002\000\030\004" +
    "\030\007\020\010\041\013\011\023\023\024\022\045\024" +
    "\072\016\073\027\074\031\075\012\001\002\000\016\002" +
    "\uffd8\027\uffd8\037\uffd8\051\uffd8\052\uffd8\055\uffd8\001\002" +
    "\000\004\037\226\001\002\000\030\004\030\007\020\010" +
    "\041\013\011\023\023\024\022\045\024\072\016\073\027" +
    "\074\031\075\012\001\002\000\070\002\uffbf\005\uffbf\006" +
    "\uffbf\011\uffbf\012\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf" +
    "\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\027" +
    "\uffbf\033\uffbf\034\uffbf\035\uffbf\037\uffbf\040\uffbf\041\uffbf" +
    "\050\uffbf\051\uffbf\052\uffbf\054\uffbf\055\uffbf\001\002\000" +
    "\022\030\073\031\102\032\074\044\077\057\076\060\075" +
    "\062\101\072\100\001\002\000\004\072\212\001\002\000" +
    "\030\004\030\007\020\010\041\013\011\023\023\024\022" +
    "\045\024\072\016\073\027\074\031\075\012\001\002\000" +
    "\070\002\uffbe\005\uffbe\006\uffbe\011\uffbe\012\uffbe\014\uffbe" +
    "\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023" +
    "\uffbe\024\uffbe\025\uffbe\027\uffbe\033\uffbe\034\uffbe\035\uffbe" +
    "\037\uffbe\040\uffbe\041\uffbe\050\uffbe\051\uffbe\052\uffbe\054" +
    "\uffbe\055\uffbe\001\002\000\016\002\uffe5\027\uffe5\037\uffe5" +
    "\051\uffe5\052\uffe5\055\uffe5\001\002\000\070\002\uffbb\005" +
    "\uffbb\006\uffbb\011\uffbb\012\uffbb\014\uffbb\015\uffbb\016\uffbb" +
    "\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025" +
    "\uffbb\027\uffbb\033\uffbb\034\uffbb\035\uffbb\037\uffbb\040\uffbb" +
    "\041\uffbb\050\uffbb\051\uffbb\052\uffbb\054\uffbb\055\uffbb\001" +
    "\002\000\030\004\030\007\020\010\041\013\011\023\023" +
    "\024\022\045\024\072\016\073\027\074\031\075\012\001" +
    "\002\000\024\004\030\007\020\010\041\024\022\045\024" +
    "\072\016\073\027\074\031\075\012\001\002\000\024\004" +
    "\030\007\020\010\041\024\022\045\024\072\016\073\027" +
    "\074\031\075\012\001\002\000\070\002\uffbd\005\uffbd\006" +
    "\uffbd\011\uffbd\012\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd" +
    "\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\027" +
    "\uffbd\033\uffbd\034\uffbd\035\uffbd\037\uffbd\040\uffbd\041\uffbd" +
    "\050\uffbd\051\uffbd\052\uffbd\054\uffbd\055\uffbd\001\002\000" +
    "\004\002\177\001\002\000\062\004\030\007\020\010\041" +
    "\013\011\023\023\024\022\036\026\037\010\045\024\046" +
    "\037\047\015\053\036\056\014\063\021\064\006\065\035" +
    "\066\005\067\033\070\050\071\013\072\016\073\027\074" +
    "\031\075\012\001\002\000\070\002\uffbc\005\uffbc\006\uffbc" +
    "\011\uffbc\012\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020" +
    "\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\027\uffbc" +
    "\033\uffbc\034\uffbc\035\uffbc\037\uffbc\040\uffbc\041\uffbc\050" +
    "\uffbc\051\uffbc\052\uffbc\054\uffbc\055\uffbc\001\002\000\030" +
    "\004\030\007\020\010\041\013\011\023\023\024\022\045" +
    "\024\072\016\073\027\074\031\075\012\001\002\000\070" +
    "\002\uffc0\005\uffc0\006\uffc0\011\uffc0\012\uffc0\014\uffc0\015" +
    "\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0" +
    "\024\uffc0\025\uffc0\027\uffc0\033\uffc0\034\uffc0\035\uffc0\037" +
    "\uffc0\040\uffc0\041\uffc0\050\uffc0\051\uffc0\052\uffc0\054\uffc0" +
    "\055\uffc0\001\002\000\006\026\167\027\170\001\002\000" +
    "\016\002\uffdc\027\uffdc\037\uffdc\051\uffdc\052\uffdc\055\uffdc" +
    "\001\002\000\010\002\uffff\027\163\037\uffff\001\002\000" +
    "\030\004\030\007\020\010\041\013\011\023\023\024\022" +
    "\045\024\072\016\073\027\074\031\075\012\001\002\000" +
    "\030\004\030\007\020\010\041\013\011\023\023\024\022" +
    "\045\024\072\016\073\027\074\031\075\012\001\002\000" +
    "\004\072\141\001\002\000\070\002\uffc1\005\uffc1\006\uffc1" +
    "\011\uffc1\012\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020" +
    "\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\027\uffc1" +
    "\033\uffc1\034\uffc1\035\uffc1\037\uffc1\040\uffc1\041\uffc1\050" +
    "\uffc1\051\uffc1\052\uffc1\054\uffc1\055\uffc1\001\002\000\070" +
    "\002\uffba\005\uffba\006\uffba\011\uffba\012\uffba\014\uffba\015" +
    "\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba" +
    "\024\uffba\025\uffba\027\uffba\033\uffba\034\uffba\035\uffba\037" +
    "\uffba\040\uffba\041\uffba\050\uffba\051\uffba\052\uffba\054\uffba" +
    "\055\uffba\001\002\000\070\002\uffc3\005\uffc3\006\uffc3\011" +
    "\uffc3\012\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3" +
    "\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\027\uffc3\033" +
    "\uffc3\034\uffc3\035\uffc3\037\uffc3\040\uffc3\041\uffc3\050\uffc3" +
    "\051\uffc3\052\uffc3\054\uffc3\055\uffc3\001\002\000\070\002" +
    "\uffc7\005\uffc7\006\uffc7\011\uffc7\012\uffc7\014\uffc7\015\uffc7" +
    "\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024" +
    "\uffc7\025\uffc7\027\uffc7\033\uffc7\034\134\035\uffc7\037\uffc7" +
    "\040\133\041\132\050\uffc7\051\uffc7\052\uffc7\054\uffc7\055" +
    "\uffc7\001\002\000\062\002\uffca\005\uffca\006\uffca\011\uffca" +
    "\012\uffca\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca\021" +
    "\uffca\022\uffca\023\uffca\024\127\025\130\027\uffca\033\126" +
    "\035\uffca\037\uffca\050\uffca\051\uffca\052\uffca\054\uffca\055" +
    "\uffca\001\002\000\054\002\uffcc\005\uffcc\006\uffcc\011\uffcc" +
    "\012\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021" +
    "\uffcc\022\uffcc\023\uffcc\027\uffcc\035\uffcc\037\uffcc\050\uffcc" +
    "\051\uffcc\052\uffcc\054\uffcc\055\uffcc\001\002\000\004\006" +
    "\123\001\002\000\054\002\uffce\005\uffce\006\uffce\011\uffce" +
    "\012\uffce\014\066\015\063\016\067\017\062\020\070\021" +
    "\065\022\uffce\023\uffce\027\uffce\035\uffce\037\uffce\050\uffce" +
    "\051\uffce\052\uffce\054\uffce\055\uffce\001\002\000\022\030" +
    "\073\031\102\032\074\044\077\057\076\060\075\062\101" +
    "\072\100\001\002\000\040\002\uffd0\005\uffd0\006\uffd0\011" +
    "\055\012\057\022\053\023\056\027\uffd0\035\uffd0\037\uffd0" +
    "\050\uffd0\051\uffd0\052\uffd0\054\uffd0\055\uffd0\001\002\000" +
    "\030\002\uffd3\005\uffd3\006\uffd3\027\uffd3\035\uffd3\037\uffd3" +
    "\050\uffd3\051\uffd3\052\uffd3\054\uffd3\055\uffd3\001\002\000" +
    "\030\004\030\007\020\010\041\013\011\023\023\024\022" +
    "\045\024\072\016\073\027\074\031\075\012\001\002\000" +
    "\030\004\030\007\020\010\041\013\011\023\023\024\022" +
    "\045\024\072\016\073\027\074\031\075\012\001\002\000" +
    "\030\004\uffb8\007\uffb8\010\uffb8\013\uffb8\023\uffb8\024\uffb8" +
    "\045\uffb8\072\uffb8\073\uffb8\074\uffb8\075\uffb8\001\002\000" +
    "\030\004\030\007\020\010\041\013\011\023\023\024\022" +
    "\045\024\072\016\073\027\074\031\075\012\001\002\000" +
    "\030\004\uffb7\007\uffb7\010\uffb7\013\uffb7\023\uffb7\024\uffb7" +
    "\045\uffb7\072\uffb7\073\uffb7\074\uffb7\075\uffb7\001\002\000" +
    "\034\002\uffd1\005\uffd1\006\uffd1\011\055\012\057\027\uffd1" +
    "\035\uffd1\037\uffd1\050\uffd1\051\uffd1\052\uffd1\054\uffd1\055" +
    "\uffd1\001\002\000\054\002\uffcf\005\uffcf\006\uffcf\011\uffcf" +
    "\012\uffcf\014\066\015\063\016\067\017\062\020\070\021" +
    "\065\022\uffcf\023\uffcf\027\uffcf\035\uffcf\037\uffcf\050\uffcf" +
    "\051\uffcf\052\uffcf\054\uffcf\055\uffcf\001\002\000\030\004" +
    "\uffb4\007\uffb4\010\uffb4\013\uffb4\023\uffb4\024\uffb4\045\uffb4" +
    "\072\uffb4\073\uffb4\074\uffb4\075\uffb4\001\002\000\030\004" +
    "\uffb3\007\uffb3\010\uffb3\013\uffb3\023\uffb3\024\uffb3\045\uffb3" +
    "\072\uffb3\073\uffb3\074\uffb3\075\uffb3\001\002\000\030\004" +
    "\030\007\020\010\041\013\011\023\023\024\022\045\024" +
    "\072\016\073\027\074\031\075\012\001\002\000\030\004" +
    "\uffb1\007\uffb1\010\uffb1\013\uffb1\023\uffb1\024\uffb1\045\uffb1" +
    "\072\uffb1\073\uffb1\074\uffb1\075\uffb1\001\002\000\030\004" +
    "\uffb5\007\uffb5\010\uffb5\013\uffb5\023\uffb5\024\uffb5\045\uffb5" +
    "\072\uffb5\073\uffb5\074\uffb5\075\uffb5\001\002\000\030\004" +
    "\uffb6\007\uffb6\010\uffb6\013\uffb6\023\uffb6\024\uffb6\045\uffb6" +
    "\072\uffb6\073\uffb6\074\uffb6\075\uffb6\001\002\000\030\004" +
    "\uffb2\007\uffb2\010\uffb2\013\uffb2\023\uffb2\024\uffb2\045\uffb2" +
    "\072\uffb2\073\uffb2\074\uffb2\075\uffb2\001\002\000\054\002" +
    "\uffcd\005\uffcd\006\uffcd\011\uffcd\012\uffcd\014\uffcd\015\uffcd" +
    "\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\027" +
    "\uffcd\035\uffcd\037\uffcd\050\uffcd\051\uffcd\052\uffcd\054\uffcd" +
    "\055\uffcd\001\002\000\030\002\uffd2\005\uffd2\006\uffd2\027" +
    "\uffd2\035\uffd2\037\uffd2\050\uffd2\051\uffd2\052\uffd2\054\uffd2" +
    "\055\uffd2\001\002\000\006\043\ufff1\072\ufff1\001\002\000" +
    "\006\043\ufff0\072\ufff0\001\002\000\004\034\116\001\002" +
    "\000\004\036\106\001\002\000\006\043\uffee\072\uffee\001" +
    "\002\000\006\043\uffed\072\uffed\001\002\000\022\030\073" +
    "\031\102\032\074\044\077\057\076\060\075\062\101\072" +
    "\100\001\002\000\006\043\uffef\072\uffef\001\002\000\004" +
    "\072\104\001\002\000\006\026\ufffc\027\ufffc\001\002\000" +
    "\006\043\uffea\072\uffea\001\002\000\022\030\073\031\102" +
    "\032\074\044\077\057\076\060\075\062\101\072\100\001" +
    "\002\000\006\027\113\037\114\001\002\000\004\072\112" +
    "\001\002\000\006\027\uffe8\037\uffe8\001\002\000\006\027" +
    "\uffe7\037\uffe7\001\002\000\022\030\073\031\102\032\074" +
    "\044\077\057\076\060\075\062\101\072\100\001\002\000" +
    "\006\043\uffeb\072\uffeb\001\002\000\006\027\uffe9\037\uffe9" +
    "\001\002\000\004\074\117\001\002\000\004\035\120\001" +
    "\002\000\004\061\121\001\002\000\022\030\073\031\102" +
    "\032\074\044\077\057\076\060\075\062\101\072\100\001" +
    "\002\000\006\043\uffec\072\uffec\001\002\000\030\004\030" +
    "\007\020\010\041\013\011\023\023\024\022\045\024\072" +
    "\016\073\027\074\031\075\012\001\002\000\016\002\uffe4" +
    "\027\uffe4\037\uffe4\051\uffe4\052\uffe4\055\uffe4\001\002\000" +
    "\030\004\030\007\020\010\041\013\011\023\023\024\022" +
    "\045\024\072\016\073\027\074\031\075\012\001\002\000" +
    "\030\004\uffae\007\uffae\010\uffae\013\uffae\023\uffae\024\uffae" +
    "\045\uffae\072\uffae\073\uffae\074\uffae\075\uffae\001\002\000" +
    "\030\004\uffb0\007\uffb0\010\uffb0\013\uffb0\023\uffb0\024\uffb0" +
    "\045\uffb0\072\uffb0\073\uffb0\074\uffb0\075\uffb0\001\002\000" +
    "\030\004\uffaf\007\uffaf\010\uffaf\013\uffaf\023\uffaf\024\uffaf" +
    "\045\uffaf\072\uffaf\073\uffaf\074\uffaf\075\uffaf\001\002\000" +
    "\054\002\uffcb\005\uffcb\006\uffcb\011\uffcb\012\uffcb\014\uffcb" +
    "\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023" +
    "\uffcb\027\uffcb\035\uffcb\037\uffcb\050\uffcb\051\uffcb\052\uffcb" +
    "\054\uffcb\055\uffcb\001\002\000\004\072\140\001\002\000" +
    "\004\072\137\001\002\000\030\004\030\007\020\010\041" +
    "\013\011\023\023\024\022\045\024\072\016\073\027\074" +
    "\031\075\012\001\002\000\004\035\136\001\002\000\070" +
    "\002\uffc6\005\uffc6\006\uffc6\011\uffc6\012\uffc6\014\uffc6\015" +
    "\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6" +
    "\024\uffc6\025\uffc6\027\uffc6\033\uffc6\034\uffc6\035\uffc6\037" +
    "\uffc6\040\uffc6\041\uffc6\050\uffc6\051\uffc6\052\uffc6\054\uffc6" +
    "\055\uffc6\001\002\000\070\002\uffc5\005\uffc5\006\uffc5\011" +
    "\uffc5\012\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5" +
    "\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\027\uffc5\033" +
    "\uffc5\034\uffc5\035\uffc5\037\uffc5\040\uffc5\041\uffc5\050\uffc5" +
    "\051\uffc5\052\uffc5\054\uffc5\055\uffc5\001\002\000\070\002" +
    "\uffc4\005\uffc4\006\uffc4\011\uffc4\012\uffc4\014\uffc4\015\uffc4" +
    "\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024" +
    "\uffc4\025\uffc4\027\uffc4\033\uffc4\034\uffc4\035\uffc4\037\uffc4" +
    "\040\uffc4\041\uffc4\050\uffc4\051\uffc4\052\uffc4\054\uffc4\055" +
    "\uffc4\001\002\000\004\004\143\001\002\000\006\036\026" +
    "\037\010\001\002\000\024\005\145\030\073\031\102\032" +
    "\074\044\077\057\076\060\075\062\101\072\100\001\002" +
    "\000\006\005\ufff6\042\ufff6\001\002\000\006\036\ufff8\037" +
    "\ufff8\001\002\000\006\043\153\072\154\001\002\000\006" +
    "\005\151\042\150\001\002\000\022\030\073\031\102\032" +
    "\074\044\077\057\076\060\075\062\101\072\100\001\002" +
    "\000\006\036\ufff9\037\ufff9\001\002\000\006\005\ufff7\042" +
    "\ufff7\001\002\000\004\072\155\001\002\000\006\005\ufff4" +
    "\042\ufff4\001\002\000\006\005\ufff5\042\ufff5\001\002\000" +
    "\006\026\ufffa\027\ufffa\001\002\000\004\054\160\001\002" +
    "\000\056\004\030\007\020\010\041\013\011\023\023\024" +
    "\022\036\026\037\010\045\024\047\015\053\036\055\uffe0" +
    "\056\014\063\021\064\006\065\035\066\005\067\033\072" +
    "\016\073\027\074\031\075\012\001\002\000\004\055\165" +
    "\001\002\000\012\027\163\051\uffe1\052\uffe1\055\uffe1\001" +
    "\002\000\054\004\030\007\020\010\041\013\011\023\023" +
    "\024\022\036\026\037\010\045\024\047\015\053\036\056" +
    "\014\063\021\064\006\065\035\066\005\067\033\072\016" +
    "\073\027\074\031\075\012\001\002\000\016\002\uffe6\027" +
    "\uffe6\037\uffe6\051\uffe6\052\uffe6\055\uffe6\001\002\000\016" +
    "\002\uffdf\027\uffdf\037\uffdf\051\uffdf\052\uffdf\055\uffdf\001" +
    "\002\000\016\002\uffde\027\uffde\037\uffde\051\uffde\052\uffde" +
    "\055\uffde\001\002\000\054\004\030\007\020\010\041\013" +
    "\011\023\023\024\022\036\026\037\010\045\024\047\015" +
    "\053\036\056\014\063\021\064\006\065\035\066\005\067" +
    "\033\072\016\073\027\074\031\075\012\001\002\000\010" +
    "\046\037\070\050\071\013\001\002\000\006\026\ufffe\027" +
    "\ufffe\001\002\000\010\002\001\027\163\037\001\001\002" +
    "\000\004\005\174\001\002\000\070\002\uffb9\005\uffb9\006" +
    "\uffb9\011\uffb9\012\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9" +
    "\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\027" +
    "\uffb9\033\uffb9\034\uffb9\035\uffb9\037\uffb9\040\uffb9\041\uffb9" +
    "\050\uffb9\051\uffb9\052\uffb9\054\uffb9\055\uffb9\001\002\000" +
    "\004\037\176\001\002\000\020\002\ufff3\026\ufff3\027\ufff3" +
    "\037\ufff3\051\ufff3\052\ufff3\055\ufff3\001\002\000\004\002" +
    "\000\001\002\000\070\002\uffc9\005\uffc9\006\uffc9\011\uffc9" +
    "\012\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021" +
    "\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\027\uffc9\033\uffc9" +
    "\034\134\035\uffc9\037\uffc9\040\133\041\132\050\uffc9\051" +
    "\uffc9\052\uffc9\054\uffc9\055\uffc9\001\002\000\070\002\uffc2" +
    "\005\uffc2\006\uffc2\011\uffc2\012\uffc2\014\uffc2\015\uffc2\016" +
    "\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2" +
    "\025\uffc2\027\uffc2\033\uffc2\034\uffc2\035\uffc2\037\uffc2\040" +
    "\uffc2\041\uffc2\050\uffc2\051\uffc2\052\uffc2\054\uffc2\055\uffc2" +
    "\001\002\000\016\002\uffdb\027\uffdb\037\uffdb\051\uffdb\052" +
    "\uffdb\055\uffdb\001\002\000\004\050\204\001\002\000\060" +
    "\004\030\007\020\010\041\013\011\023\023\024\022\036" +
    "\026\037\010\045\024\047\015\051\uffe0\052\uffe0\053\036" +
    "\056\014\063\021\064\006\065\035\066\005\067\033\072" +
    "\016\073\027\074\031\075\012\001\002\000\006\051\206" +
    "\052\207\001\002\000\056\004\030\007\020\010\041\013" +
    "\011\023\023\024\022\036\026\037\010\045\024\047\015" +
    "\052\uffe0\053\036\056\014\063\021\064\006\065\035\066" +
    "\005\067\033\072\016\073\027\074\031\075\012\001\002" +
    "\000\016\002\uffe3\027\uffe3\037\uffe3\051\uffe3\052\uffe3\055" +
    "\uffe3\001\002\000\004\052\211\001\002\000\016\002\uffe2" +
    "\027\uffe2\037\uffe2\051\uffe2\052\uffe2\055\uffe2\001\002\000" +
    "\004\004\213\001\002\000\032\004\030\005\215\007\020" +
    "\010\041\013\011\023\023\024\022\045\024\072\016\073" +
    "\027\074\031\075\012\001\002\000\016\002\uffd9\027\uffd9" +
    "\037\uffd9\051\uffd9\052\uffd9\055\uffd9\001\002\000\016\002" +
    "\uffd6\027\uffd6\037\uffd6\051\uffd6\052\uffd6\055\uffd6\001\002" +
    "\000\006\005\uffd4\027\uffd4\001\002\000\006\005\221\027" +
    "\220\001\002\000\030\004\030\007\020\010\041\013\011" +
    "\023\023\024\022\045\024\072\016\073\027\074\031\075" +
    "\012\001\002\000\016\002\uffd7\027\uffd7\037\uffd7\051\uffd7" +
    "\052\uffd7\055\uffd7\001\002\000\006\005\uffd5\027\uffd5\001" +
    "\002\000\004\072\224\001\002\000\006\026\ufffb\027\ufffb" +
    "\001\002\000\062\002\uffc8\005\uffc8\006\uffc8\011\uffc8\012" +
    "\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8" +
    "\022\uffc8\023\uffc8\024\uffc8\025\uffc8\027\uffc8\033\uffc8\035" +
    "\uffc8\037\uffc8\050\uffc8\051\uffc8\052\uffc8\054\uffc8\055\uffc8" +
    "\001\002\000\020\002\ufff2\026\ufff2\027\ufff2\037\ufff2\051" +
    "\ufff2\052\ufff2\055\ufff2\001\002\000\016\002\uffda\027\uffda" +
    "\037\uffda\051\uffda\052\uffda\055\uffda\001\002\000\016\002" +
    "\uffdd\027\uffdd\037\uffdd\051\uffdd\052\uffdd\055\uffdd\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\040\002\024\003\031\004\003\010\006\017" +
    "\033\020\016\024\045\025\051\026\050\027\046\030\044" +
    "\031\043\032\042\033\041\034\037\001\001\000\002\001" +
    "\001\000\024\024\227\025\051\026\050\027\046\030\044" +
    "\031\043\032\042\033\041\034\037\001\001\000\024\024" +
    "\226\025\051\026\050\027\046\030\044\031\043\032\042" +
    "\033\041\034\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\031\224\032\042\033\041\034\037\001\001" +
    "\000\002\001\001\000\004\011\222\001\001\000\002\001" +
    "\001\000\024\024\202\025\051\026\050\027\046\030\044" +
    "\031\043\032\042\033\041\034\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\024\201" +
    "\025\051\026\050\027\046\030\044\031\043\032\042\033" +
    "\041\034\037\001\001\000\006\033\200\034\037\001\001" +
    "\000\010\032\177\033\041\034\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\002\174\003\031\004\003" +
    "\010\006\017\033\020\016\024\045\025\051\026\050\027" +
    "\046\030\044\031\043\032\042\033\041\034\037\001\001" +
    "\000\002\001\001\000\022\025\172\026\050\027\046\030" +
    "\044\031\043\032\042\033\041\034\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\024\165\025\051\026\050\027\046\030\044" +
    "\031\043\032\042\033\041\034\037\001\001\000\024\024" +
    "\156\025\051\026\050\027\046\030\044\031\043\032\042" +
    "\033\041\034\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\037\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\063\001\001\000\004\011\102\001\001" +
    "\000\004\035\053\001\001\000\002\001\001\000\022\025" +
    "\071\026\050\027\046\030\044\031\043\032\042\033\041" +
    "\034\037\001\001\000\016\027\060\030\044\031\043\032" +
    "\042\033\041\034\037\001\001\000\002\001\001\000\020" +
    "\026\057\027\046\030\044\031\043\032\042\033\041\034" +
    "\037\001\001\000\002\001\001\000\004\035\053\001\001" +
    "\000\004\036\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\030\070\031\043\032\042\033\041\034\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\011\107\015\106" +
    "\016\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\107\016\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\121" +
    "\001\001\000\002\001\001\000\024\024\123\025\051\026" +
    "\050\027\046\030\044\031\043\032\042\033\041\034\037" +
    "\001\001\000\002\001\001\000\012\031\130\032\042\033" +
    "\041\034\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\024\134\025\051\026\050\027\046" +
    "\030\044\031\043\032\042\033\041\034\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\141\001\001\000\004\010\155\001" +
    "\001\000\010\006\143\007\146\011\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\151\011\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\010\006\017\161\020\016\021\160\024\045\025\051\026" +
    "\050\027\046\030\044\031\043\032\042\033\041\034\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\010" +
    "\006\020\163\024\045\025\051\026\050\027\046\030\044" +
    "\031\043\032\042\033\041\034\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\010\006" +
    "\017\171\020\016\024\045\025\051\026\050\027\046\030" +
    "\044\031\043\032\042\033\041\034\037\001\001\000\004" +
    "\004\170\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\010\006" +
    "\017\161\020\016\021\204\024\045\025\051\026\050\027" +
    "\046\030\044\031\043\032\042\033\041\034\037\001\001" +
    "\000\002\001\001\000\034\010\006\017\161\020\016\021" +
    "\207\024\045\025\051\026\050\027\046\030\044\031\043" +
    "\032\042\033\041\034\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\213\001\001" +
    "\000\026\023\216\024\215\025\051\026\050\027\046\030" +
    "\044\031\043\032\042\033\041\034\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\024\221\025\051\026\050\027\046\030\044" +
    "\031\043\032\042\033\041\034\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErr();
   AnalizadorLexicoTiny1 alex = (AnalizadorLexicoTiny1)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErr errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintacticoTiny$actions {


   private SemOps sem = new SemOps();

  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= Decs SEP Instrucciones 
            {
              Programa RESULT =null;
		Decs ds = (Decs)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Instrucciones is = (Instrucciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.programa_conDecs(ds, is);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Programa ::= Instrucciones 
            {
              Programa RESULT =null;
		Instrucciones is = (Instrucciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.programa_sinDecs(is);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decs ::= Decs PTOCOMA Dec 
            {
              Decs RESULT =null;
		Decs ds = (Decs)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.decs_varias(ds, d);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Decs",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decs ::= Dec 
            {
              Decs RESULT =null;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.decs_una(d);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Decs",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Dec ::= VAR tipo ID 
            {
              Dec RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		StringLocalizado i = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.dec_var(t, i);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Dec",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Dec ::= TYPE tipo ID 
            {
              Dec RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		StringLocalizado i = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.dec_type(t, i);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Dec",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Dec ::= PROC ID ParamForm bloque 
            {
              Dec RESULT =null;
		StringLocalizado i = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ParamForm p = (ParamForm)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Bloque b = (Bloque)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.dec_proc(i, p, b);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Dec",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ParamForm ::= PAP ListParamForm PCIERRE 
            {
              ParamForm RESULT =null;
		ListParamForm l = (ListParamForm)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = sem.param_form(l);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParamForm",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ParamForm ::= PAP PCIERRE 
            {
              ParamForm RESULT =null;
		RESULT = sem.param_form_vacio();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParamForm",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ListParamForm ::= ListParamForm COMA Parametro 
            {
              ListParamForm RESULT =null;
		ListParamForm l = (ListParamForm)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.list_param_form_varios(l, p);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListParamForm",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ListParamForm ::= Parametro 
            {
              ListParamForm RESULT =null;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.list_param_form_uno(p);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListParamForm",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Parametro ::= tipo AMP ID 
            {
              Parametro RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		StringLocalizado i = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.param_variable(t, i);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Parametro",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Parametro ::= tipo ID 
            {
              Parametro RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		StringLocalizado i = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.param_valor(t, i);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Parametro",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // bloque ::= LLAVEABIERTA Programa LLAVECERRADA 
            {
              Bloque RESULT =null;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = sem.bloque(p);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("bloque",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // bloque ::= LLAVECERRADA LLAVECERRADA 
            {
              Bloque RESULT =null;
		RESULT = sem.bloque_vacio();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("bloque",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo ::= INT 
            {
              Tipo RESULT =null;
		RESULT = sem.tipo_int();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo ::= BOOL 
            {
              Tipo RESULT =null;
		RESULT = sem.tipo_bool();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo ::= REAL 
            {
              Tipo RESULT =null;
		RESULT = sem.tipo_real();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo ::= STRING 
            {
              Tipo RESULT =null;
		RESULT = sem.tipo_string();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo ::= ID 
            {
              Tipo RESULT =null;
		StringLocalizado i = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.id(i);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo ::= ARRAY CORABIERTO NENT CORCERRADO OF tipo 
            {
              Tipo RESULT =null;
		StringLocalizado n = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT =sem.tipo_array(n, t);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo ::= RECORD LLAVEABIERTA campos LLAVECERRADA 
            {
              Tipo RESULT =null;
		Campos cs = (Campos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = sem.tipo_record(cs);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo ::= POINTER tipo 
            {
              Tipo RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.tipo_pointer(t);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // campos ::= campos PTOCOMA campo 
            {
              Campos RESULT =null;
		Campos cs = (Campos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Campo c = (Campo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.campos_varios(cs, c);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("campos",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // campos ::= campo 
            {
              Campos RESULT =null;
		Campo c = (Campo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.campos_uno(c);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("campos",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // campo ::= tipo ID 
            {
              Campo RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		StringLocalizado i = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.campo(t, i);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("campo",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Instrucciones ::= Instrucciones PTOCOMA Inst 
            {
              Instrucciones RESULT =null;
		Instrucciones is = (Instrucciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Inst i = (Inst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.instrucciones_varias(is, i);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrucciones",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Instrucciones ::= Inst 
            {
              Instrucciones RESULT =null;
		RESULT = sem.instrucciones_una(i);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrucciones",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Inst ::= Expresion IGUAL Expresion 
            {
              Inst RESULT =null;
		Expresion e0 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.inst_asig(e0, e2);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Inst ::= IF Expresion THEN InstOp ENDIF 
            {
              Inst RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		InstOp i = (InstOp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = sem.inst_ifThen(e,i);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Inst ::= IF Expresion THEN InstOp ELSE InstOp ENDIF 
            {
              Inst RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		InstOp i1 = (InstOp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		InstOp i2 = (InstOp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = sem.inst_IfThenElse(e, i1, i2);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // InstOp ::= Instrucciones 
            {
              InstOp RESULT =null;
		Instrucciones is = (Instrucciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.inst_op_varias(is);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InstOp",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // InstOp ::= 
            {
              InstOp RESULT =null;
		RESULT = sem.inst_op_vacio();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InstOp",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Inst ::= WHILE Expresion DO InstOp ENDWHILE 
            {
              Inst RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		InstOp i = (InstOp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = sem.inst_While(e, i);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Inst ::= READ Expresion 
            {
              Inst RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.inst_Read(e);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Inst ::= WRITE Expresion 
            {
              Inst RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.inst_Write(e);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Inst ::= NL 
            {
              Inst RESULT =null;
		RESULT = sem.inst_NewLine();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Inst ::= NEW Expresion 
            {
              Inst RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.inst_new(e);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Inst ::= DELETE Expresion 
            {
              Inst RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.inst_delete(e);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Inst ::= CALL ID paramReales 
            {
              Inst RESULT =null;
		StringLocalizado i = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ParReales pr = (ParReales)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.inst_Call(i, pr);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Inst ::= bloque 
            {
              Inst RESULT =null;
		Bloque b = (Bloque)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.inst_bloque(b);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // paramReales ::= PAP ListaExpresiones PCIERRE 
            {
              ParReales RESULT =null;
		ListaExpresiones le = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = sem.paramReales_varios(le);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("paramReales",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // paramReales ::= PAP PCIERRE 
            {
              ParReales RESULT =null;
		RESULT = sem.paramReales_vacio();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("paramReales",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ListaExpresiones ::= ListaExpresiones PTOCOMA Expresion 
            {
              ListaExpresiones RESULT =null;
		ListaExpresiones le = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.listaExpresiones_varias(le, e);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaExpresiones",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ListaExpresiones ::= Expresion 
            {
              ListaExpresiones RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.listaExpresiones_una(e);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaExpresiones",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expresion ::= E0 
            {
              Expresion RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Expresion",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // E0 ::= E1 MAS E0 
            {
              Expresion RESULT =null;
		Expresion a0 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion a1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.suma(a0, a1);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E0 ::= E1 MENOS E1 
            {
              Expresion RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.resta(e, e1);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E0 ::= E1 
            {
              Expresion RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E1 ::= E1 OP1 E2 
            {
              Expresion RESULT =null;
		Expresion a0 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expresion a1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.exp(op, a0, a1);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E1 ::= E2 
            {
              Expresion RESULT =null;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E2 ::= E2 OP2 E3 
            {
              Expresion RESULT =null;
		Expresion a0 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expresion a1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.exp(op, a0, a1);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E2 ::= E3 
            {
              Expresion RESULT =null;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E3 ::= E4 OP3 E4 
            {
              Expresion RESULT =null;
		Expresion a0 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expresion a1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.exp(op, a0, a1);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E3 ::= E4 
            {
              Expresion RESULT =null;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E4 ::= MENOS E5 
            {
              Expresion RESULT =null;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.neg(a);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E4 ::= NOT E4 
            {
              Expresion RESULT =null;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.not(a);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E4 ::= E5 
            {
              Expresion RESULT =null;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E5 ::= E5 CORABIERTO Expresion CORCERRADO 
            {
              Expresion RESULT =null;
		Expresion a0 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Expresion a1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = sem.indexacion(a0, a1);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E5 ::= E5 PUNTO ID 
            {
              Expresion RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		StringLocalizado i = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.punto(e, i);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E5 ::= E5 FLECHA ID 
            {
              Expresion RESULT =null;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		StringLocalizado i = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.flecha(a, i);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E5 ::= E6 
            {
              Expresion RESULT =null;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E6 ::= MUL E6 
            {
              Expresion RESULT =null;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.indice(a);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E6 ::= E7 
            {
              Expresion RESULT =null;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E7 ::= NENT 
            {
              Expresion RESULT =null;
		StringLocalizado n = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.numeroEntero(n);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E7 ::= NREAL 
            {
              Expresion RESULT =null;
		StringLocalizado n = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.numeroReal(n);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E7 ::= ID 
            {
              Expresion RESULT =null;
		StringLocalizado i = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.id(i);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E7 ::= NULL 
            {
              Expresion RESULT =null;
		RESULT = sem.nulo();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E7 ::= LITERALCAD 
            {
              Expresion RESULT =null;
		StringLocalizado l = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.literalCad(l);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E7 ::= TRUE 
            {
              Expresion RESULT =null;
		RESULT = sem.cierto();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E7 ::= FALSE 
            {
              Expresion RESULT =null;
		RESULT = sem.falso();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E7 ::= PAP E0 PCIERRE 
            {
              Expresion RESULT =null;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = a;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP1 ::= AND 
            {
              String RESULT =null;
		RESULT = "and";
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP1 ::= OR 
            {
              String RESULT =null;
		RESULT = "or";
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OP2 ::= MAYOR 
            {
              String RESULT =null;
		RESULT = ">";
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OP2 ::= MENOR 
            {
              String RESULT =null;
		RESULT = "<";
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OP2 ::= MAYORIGUAL 
            {
              String RESULT =null;
		RESULT = ">=";
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OP2 ::= MENORIGUAL 
            {
              String RESULT =null;
		RESULT = "<=";
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OP2 ::= COMPARACION 
            {
              String RESULT =null;
		RESULT = "==";
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OP2 ::= DISTINTO 
            {
              String RESULT =null;
		RESULT = "!=";
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OP3 ::= MUL 
            {
              String RESULT =null;
		RESULT = "*";
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP3",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OP3 ::= DIV 
            {
              String RESULT =null;
		RESULT = "/";
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP3",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OP3 ::= MODULO 
            {
              String RESULT =null;
		RESULT = "%";
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP3",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

}
