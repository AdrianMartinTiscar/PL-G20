/* Generated By:JavaCC: Do not edit this line. ConstructorAST1.java */
package descendente;

import procesamiento.TinyASint.Exp;
import procesamiento.TinyASint.Dec;
import procesamiento.TinyASint.Decs;
import procesamiento.TinyASint.Programa;
import procesamiento.TinyASint.Inst;
import procesamiento.TinyASint.Insts;
import procesamiento.TinyASint.Tipo;
import procesamiento.TinyASint.ParamForm;
import procesamiento.TinyASint.LParamForm;
import procesamiento.TinyASint.ParamD;
import procesamiento.TinyASint.Campo;
import procesamiento.TinyASint.Campos;
import procesamiento.TinyASint.ParReales;
import procesamiento.TinyASint.LExpresiones;
import procesamiento.TinyASint.StringLocalizado;
import procesamiento.TinyASint.InstrOp;
import procesamiento.TinyASint.Bloque_vacio;
import procesamiento.TinyASint.NEntero;
import procesamiento.SemOps;

public class ConstructorAST1 implements ConstructorAST1Constants {
        private SemOps sem = new SemOps();

  final public Programa ProgramaPrev() throws ParseException {
                         Programa prog;
    prog = Programa();
    jj_consume_token(0);
                                                             {if (true) return prog;}
    throw new Error("Missing return statement in function");
  }

  final public Programa Programa() throws ParseException {
                     Decs decs; Insts instrs;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case proc:
    case var:
    case type:
      decs = Decs();
      jj_consume_token(Separacion);
      instrs = Insts();
                                                                                  {if (true) return sem.prog(decs, instrs);}
      break;
    case ptrue:
    case pfalse:
    case not:
    case pnull:
    case pif:
    case pwhile:
    case call:
    case pnew:
    case delete:
    case read:
    case write:
    case nl:
    case menos:
    case id:
    case Nentero:
    case Nreal:
    case literalCad:
    case 49:
    case 53:
    case 59:
      instrs = Insts();
                                                         {if (true) return sem.programa_sinDecs(instrs);}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Decs Decs() throws ParseException {
                 Dec dec; Decs restDec;
    dec = Dec();
    restDec = restoDec(dec);
                                                                  {if (true) return restDec;}
    throw new Error("Missing return statement in function");
  }

  final public Decs restoDec(Dec dec) throws ParseException {
                            Decs decs;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PtoComa:
      jj_consume_token(PtoComa);
      decs = Decs();
                                                                           {if (true) return sem.declaracion_varias(dec, decs);}
      break;
    default:
      jj_la1[1] = jj_gen;
                                                    {if (true) return sem.declaracion_una(dec);}
    }
    throw new Error("Missing return statement in function");
  }

  final public Dec Dec() throws ParseException {
               Token d; Tipo tipo; Token t; ParamForm param; Bloque_vacio bloque;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case var:
      d = jj_consume_token(var);
      tipo = Tipo();
      t = jj_consume_token(id);
                                                       {if (true) return sem.dec_habitual(tipo, sem.str(t.image,t.beginLine,t.beginColumn));}
      break;
    case type:
      d = jj_consume_token(type);
      tipo = Tipo();
      t = jj_consume_token(id);
                                                        {if (true) return sem.dec_type(tipo, sem.tipoin(sem.str(t.image,t.beginLine,t.beginColumn)));}
      break;
    case proc:
      d = jj_consume_token(proc);
      t = jj_consume_token(id);
      param = paramForm();
      bloque = bloque();
                                                                              {if (true) return sem.dec_proc(sem.str(t.image,t.beginLine,t.beginColumn), param, bloque);}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ParamForm paramForm() throws ParseException {
                           ParamD paramD; LParamForm paramL;
    jj_consume_token(49);
    paramD = paramFormD();
    paramL = LparamForm();
    jj_consume_token(50);
                                                                                            {if (true) return sem.param_formAux(paramD, paramL);}
    throw new Error("Missing return statement in function");
  }

  final public ParamD paramFormD() throws ParseException {
                         Tipo tipo; ParamD restparam;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case pint:
    case real:
    case bool:
    case string:
    case record:
    case array:
    case pointer:
    case id:
      tipo = Tipo();
      restparam = restParamFormD(tipo);
                                                                                        {if (true) return restparam;}
      break;
    default:
      jj_la1[3] = jj_gen;
                                            {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  final public ParamD restParamFormD(Tipo tipo) throws ParseException {
                                      Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 51:
      jj_consume_token(51);
      t = jj_consume_token(id);
                                                                                      {if (true) return sem.paramDAmp(tipo, sem.str(t.image,t.beginLine,t.beginColumn));}
      break;
    case id:
      t = jj_consume_token(id);
                                                                                  {if (true) return sem.paramD(tipo, sem.str(t.image,t.beginLine,t.beginColumn));}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public LParamForm LparamForm() throws ParseException {
                             ParamD paramd; LParamForm paramL;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 52:
      jj_consume_token(52);
      paramd = paramFormD();
      paramL = LparamForm();
                                                                                         {if (true) return sem.lparamFormAux(paramd, paramL);}
      break;
    default:
      jj_la1[5] = jj_gen;
                                            {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Bloque_vacio bloque() throws ParseException {
                           Bloque_vacio blo;
    jj_consume_token(53);
    blo = resbloque();
    jj_consume_token(54);
                                                              {if (true) return blo;}
    throw new Error("Missing return statement in function");
  }

  final public Bloque_vacio resbloque() throws ParseException {
                              Programa prog;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ptrue:
    case pfalse:
    case not:
    case pnull:
    case proc:
    case pif:
    case pwhile:
    case call:
    case pnew:
    case delete:
    case read:
    case write:
    case nl:
    case var:
    case type:
    case menos:
    case id:
    case Nentero:
    case Nreal:
    case literalCad:
    case 49:
    case 53:
    case 59:
      prog = Programa();
                                                             {if (true) return sem.bloque(prog);}
      break;
    default:
      jj_la1[6] = jj_gen;
                                             {if (true) return sem.bloque_vacio();}
    }
    throw new Error("Missing return statement in function");
  }

  final public Tipo tipoBas() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case pint:
      jj_consume_token(pint);
                                            {if (true) return sem.intt();}
      break;
    case bool:
      jj_consume_token(bool);
                                           {if (true) return sem.boolt();}
      break;
    case real:
      jj_consume_token(real);
                                           {if (true) return sem.realt();}
      break;
    case string:
      jj_consume_token(string);
                                             {if (true) return sem.stringt();}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Tipo Tipo() throws ParseException {
                 Tipo t; Token i;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case pint:
    case real:
    case bool:
    case string:
      t = tipoBas();
                                              {if (true) return t;}
      break;
    case array:
      t = tarray();
                                             {if (true) return t;}
      break;
    case record:
      t = trecord();
                                              {if (true) return t;}
      break;
    case pointer:
      t = tpointer();
                                               {if (true) return t;}
      break;
    case id:
      i = jj_consume_token(id);
                                         {if (true) return sem.tipoin(sem.str(i.image,i.beginLine,i.beginColumn));}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Tipo tarray() throws ParseException {
                   Token num; Tipo tipo;
    jj_consume_token(array);
    jj_consume_token(55);
    num = jj_consume_token(Nentero);
    jj_consume_token(56);
    jj_consume_token(of);
    tipo = Tipo();
                                                                                   {if (true) return sem.tArray(sem.str(num.image,num.beginLine,num.beginColumn), tipo);}
    throw new Error("Missing return statement in function");
  }

  final public Tipo trecord() throws ParseException {
                    Campo campo; Campos campos;
    jj_consume_token(record);
    jj_consume_token(53);
    campo = campo();
    campos = campos();
    jj_consume_token(54);
                                                                                    {if (true) return sem.trecordAux(campo, campos);}
    throw new Error("Missing return statement in function");
  }

  final public Campos campos() throws ParseException {
                     Campo campo; Campos campos;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PtoComa:
      jj_consume_token(PtoComa);
      campo = campo();
      campos = campos();
                                                                            {if (true) return sem.campos(campo, campos);}
      break;
    default:
      jj_la1[9] = jj_gen;
                                   {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Campo campo() throws ParseException {
                   Tipo t; Token i;
    t = Tipo();
    i = jj_consume_token(id);
                                                   {if (true) return sem.campo(t, sem.str(i.image,i.beginLine,i.beginColumn));}
    throw new Error("Missing return statement in function");
  }

  final public Tipo tpointer() throws ParseException {
                     Tipo t;
    jj_consume_token(pointer);
    t = Tipo();
                                                             {if (true) return sem.tPointer(t);}
    throw new Error("Missing return statement in function");
  }

  final public Insts Insts() throws ParseException {
                   Inst instr; Insts restoins;
    instr = Inst();
    restoins = restoIns(instr);
                                                            {if (true) return restoins;}
    throw new Error("Missing return statement in function");
  }

  final public Insts restoIns(Inst instr) throws ParseException {
                                Insts instrs;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PtoComa:
      jj_consume_token(PtoComa);
      instrs = Insts();
                                                                                             {if (true) return sem.instruccion_varias(instr, instrs);}
      break;
    default:
      jj_la1[10] = jj_gen;
                                                                  {if (true) return sem.instruccion_una(instr);}
    }
    throw new Error("Missing return statement in function");
  }

  final public Inst Inst() throws ParseException {
                 Exp ex1; Exp ex2; InstrOp op1; InstrOp op2; Token i; ParReales par; Bloque_vacio blo; Inst res;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ptrue:
    case pfalse:
    case not:
    case pnull:
    case menos:
    case id:
    case Nentero:
    case Nreal:
    case literalCad:
    case 49:
    case 59:
      ex1 = expr();
      jj_consume_token(asig);
      ex2 = expr();
                                                              {if (true) return sem.instruccion_asig(ex1, ex2);}
      break;
    case pif:
      jj_consume_token(pif);
      ex1 = expr();
      jj_consume_token(then);
      op1 = InstrOp();
      res = restoIf(ex1, op1);
                                                                                                {if (true) return res;}
      break;
    case pwhile:
      jj_consume_token(pwhile);
      ex1 = expr();
      jj_consume_token(pdo);
      op1 = InstrOp();
      jj_consume_token(endwhile);
                                                                                       {if (true) return sem.instruccion_while(ex1, op1);}
      break;
    case read:
      jj_consume_token(read);
      ex1 = expr();
                                                      {if (true) return sem.instruccion_read(ex1);}
      break;
    case write:
      jj_consume_token(write);
      ex1 = expr();
                                                       {if (true) return sem.instruccion_write(ex1);}
      break;
    case nl:
      jj_consume_token(nl);
                                         {if (true) return sem.instruccion_nl();}
      break;
    case pnew:
      jj_consume_token(pnew);
      ex1 = expr();
                                                      {if (true) return sem.instruccion_new(ex1);}
      break;
    case delete:
      jj_consume_token(delete);
      ex1 = expr();
                                                        {if (true) return sem.instruccion_delete(ex1);}
      break;
    case call:
      jj_consume_token(call);
      i = jj_consume_token(id);
      par = parReales();
                                                                  {if (true) return sem.instruccion_call(sem.str(i.image,i.beginLine,i.beginColumn), par);}
      break;
    case 53:
      blo = bloque();
                                                 {if (true) return sem.instruccion_bloque(blo);}
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public InstrOp InstrOp() throws ParseException {
                       Insts instrs;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ptrue:
    case pfalse:
    case not:
    case pnull:
    case pif:
    case pwhile:
    case call:
    case pnew:
    case delete:
    case read:
    case write:
    case nl:
    case menos:
    case id:
    case Nentero:
    case Nreal:
    case literalCad:
    case 49:
    case 53:
    case 59:
      instrs = Insts();
                                                                 {if (true) return sem.instrOp_varias(instrs);}
      break;
    default:
      jj_la1[12] = jj_gen;
                                                 {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Inst restoIf(Exp e, InstrOp op1) throws ParseException {
                                      InstrOp op2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case endif:
      jj_consume_token(endif);
                                                                                     {if (true) return sem.instruccion_ifAux(e, op1);}
      break;
    case pelse:
      jj_consume_token(pelse);
      op2 = InstrOp();
      jj_consume_token(endif);
                                                                                                           {if (true) return sem.instruccion_ifelseAux(e, op1, op2);}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ParReales parReales() throws ParseException {
                           ParReales p;
    jj_consume_token(49);
    p = restoPaRe();
                                                                      {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final public ParReales restoPaRe() throws ParseException {
                           Exp ex; LExpresiones lexp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ptrue:
    case pfalse:
    case not:
    case pnull:
    case menos:
    case id:
    case Nentero:
    case Nreal:
    case literalCad:
    case 49:
    case 59:
      ex = expr();
      lexp = lExpresiones();
      jj_consume_token(50);
                                                                                      {if (true) return sem.parRealesAux(ex, lexp);}
      break;
    case 50:
      jj_consume_token(50);
                                                       {if (true) return sem.parRealesAux(null, null);}
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public LExpresiones lExpresiones() throws ParseException {
                                 Exp ex; LExpresiones lexp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 52:
      jj_consume_token(52);
      ex = expr();
      lexp = lExpresiones();
                                                                                                    {if (true) return sem.lExpresionesAux(ex, lexp);}
      break;
    default:
      jj_la1[15] = jj_gen;
                                                                 {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp expr() throws ParseException {
                Exp ex;
    ex = E0();
                                     {if (true) return ex;}
    throw new Error("Missing return statement in function");
  }

  final public Exp E0() throws ParseException {
              Exp e1; Exp res;
    e1 = E1();
    res = restoE0(e1);
                                                   {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public Exp restoE0(Exp e1) throws ParseException {
                         Exp ev;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case menos:
      jj_consume_token(menos);
      ev = E1();
                                                                  {if (true) return sem.resta(e1, ev);}
      break;
    case mas:
      jj_consume_token(mas);
      ev = E0();
                                                                {if (true) return sem.suma(e1, ev);}
      break;
    default:
      jj_la1[16] = jj_gen;
                                                 {if (true) return e1;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp E1() throws ParseException {
              Exp e2; Exp res;
    e2 = E2();
    res = rest2E1(e2);
                                                   {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public Exp rest2E1(Exp e2) throws ParseException {
                         String op; Exp ev; Exp res;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case and:
    case or:
      op = op1AI();
      ev = E2();
      res = rest2E1(ev);
                                                                             {if (true) return sem.exp(op, e2, res);}
      break;
    default:
      jj_la1[17] = jj_gen;
                                         {if (true) return e2;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp E2() throws ParseException {
              Exp e3; Exp res;
    e3 = E3();
    res = rest2E2(e3);
                                                   {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public Exp rest2E2(Exp e3) throws ParseException {
                         String op; Exp ev; Exp res;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 60:
    case 61:
      op = op2AI();
      ev = E3();
      res = rest2E2(ev);
                                                                             {if (true) return sem.exp(op, e3, res);}
      break;
    default:
      jj_la1[18] = jj_gen;
                                         {if (true) return e3;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp E3() throws ParseException {
              Exp e4; Exp res;
    e4 = E4();
    res = restE3(e4);
                                                  {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public Exp restE3(Exp e4) throws ParseException {
                        String op; Exp ev; Exp res;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 59:
    case 62:
    case 63:
      op = op3NA();
      ev = E4();
      res = restE3(ev);
                                                                            {if (true) return sem.exp(op, e4, res);}
      break;
    default:
      jj_la1[19] = jj_gen;
                                         {if (true) return e4;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp E4() throws ParseException {
              Exp e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case menos:
      jj_consume_token(menos);
      e = E5();
                                          {if (true) return sem.neg(e);}
      break;
    case not:
      jj_consume_token(not);
      e = E4();
                                        {if (true) return sem.not(e);}
      break;
    case ptrue:
    case pfalse:
    case pnull:
    case id:
    case Nentero:
    case Nreal:
    case literalCad:
    case 49:
    case 59:
      e = E5();
                                  {if (true) return e;}
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp E5() throws ParseException {
              Exp e6; Exp res;
    e6 = E6();
    res = Resto2E5(e6);
                                                    {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public Exp Resto2E5(Exp e6) throws ParseException {
                          Exp res; Exp res2; Exp rese5;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 55:
    case 57:
    case 58:
      res = RestoE5(e6);
      res2 = Resto2E5(res);
                                                                                      {if (true) return res2;}
      break;
    default:
      jj_la1[21] = jj_gen;
                                                  {if (true) return e6;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp RestoE5(Exp res) throws ParseException {
                          Exp e; Token i;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 55:
      jj_consume_token(55);
      e = expr();
      jj_consume_token(56);
                                                                    {if (true) return sem.indice(res, e);}
      break;
    case 57:
      jj_consume_token(57);
      i = jj_consume_token(id);
                                                              {if (true) return sem.punto(res, sem.str(i.image,i.beginLine,i.beginColumn));}
      break;
    case 58:
      jj_consume_token(58);
      i = jj_consume_token(id);
                                                               {if (true) return sem.flecha(res, sem.str(i.image,i.beginLine,i.beginColumn));}
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp E6() throws ParseException {
              Exp ev;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 59:
      jj_consume_token(59);
      ev = E6();
                                       {if (true) return sem.indir(ev);}
      break;
    case ptrue:
    case pfalse:
    case pnull:
    case id:
    case Nentero:
    case Nreal:
    case literalCad:
    case 49:
      ev = E7();
                                   {if (true) return ev;}
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp E7() throws ParseException {
              Token e; Exp ex;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 49:
      jj_consume_token(49);
      ex = E0();
      jj_consume_token(50);
                                           {if (true) return ex;}
      break;
    case Nentero:
      e = jj_consume_token(Nentero);
                                       {if (true) return sem.nEntero(sem.str(e.image,e.beginLine,e.beginColumn));}
      break;
    case Nreal:
      e = jj_consume_token(Nreal);
                                     {if (true) return sem.nReal(sem.str(e.image,e.beginLine,e.beginColumn));}
      break;
    case ptrue:
      e = jj_consume_token(ptrue);
                                     {if (true) return sem.cierto();}
      break;
    case pfalse:
      e = jj_consume_token(pfalse);
                                      {if (true) return sem.falso();}
      break;
    case pnull:
      e = jj_consume_token(pnull);
                                     {if (true) return sem.nulo();}
      break;
    case literalCad:
      e = jj_consume_token(literalCad);
                                          {if (true) return sem.literalCad(sem.str(e.image,e.beginLine,e.beginColumn));}
      break;
    case id:
      e = jj_consume_token(id);
                                  {if (true) return sem.id(sem.str(e.image,e.beginLine,e.beginColumn));}
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String op1AI() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case and:
      jj_consume_token(and);
                                           {if (true) return "and";}
      break;
    case or:
      jj_consume_token(or);
                                          {if (true) return "or";}
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String op2AI() throws ParseException {
                    String res;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 60:
      jj_consume_token(60);
      res = resto(">");
                                                        {if (true) return res;}
      break;
    case 61:
      jj_consume_token(61);
      res = resto("<");
                                                        {if (true) return res;}
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String resto(String m) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case asig:
      jj_consume_token(asig);
                                                       {if (true) return (m+"=");}
      break;
    default:
      jj_la1[27] = jj_gen;
                                                  {if (true) return m;}
    }
    throw new Error("Missing return statement in function");
  }

  final public String op3NA() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 59:
      jj_consume_token(59);
                                       {if (true) return "*";}
      break;
    case 62:
      jj_consume_token(62);
                                       {if (true) return "/";}
      break;
    case 63:
      jj_consume_token(63);
                                       {if (true) return "%";}
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  public ConstructorAST1TokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[29];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x91e3000,0x0,0x80000,0xb0004e00,0x0,0x0,0x91e3000,0x4e00,0xb0004e00,0x0,0x0,0x9163000,0x9163000,0xc00000,0x63000,0x0,0x0,0x18000,0x0,0x0,0x63000,0x0,0x0,0x43000,0x43000,0x18000,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x823f07f,0x100,0x60,0x2000,0x82000,0x100000,0x823f07f,0x0,0x2000,0x100,0x100,0x823f01f,0x823f01f,0x0,0x807f000,0x100000,0x1800,0x0,0x30000000,0xc8000000,0x803f000,0x6800000,0x6800000,0x803e000,0x3e000,0x0,0x30000000,0x200,0xc8000000,};
   }

  public ConstructorAST1(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ConstructorAST1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  public ConstructorAST1(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ConstructorAST1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  public ConstructorAST1(ConstructorAST1TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  public void ReInit(ConstructorAST1TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[64];
    for (int i = 0; i < 64; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 29; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 64; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
