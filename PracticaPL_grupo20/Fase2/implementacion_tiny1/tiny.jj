options  {
  STATIC=false;
}  

PARSER_BEGIN(AnalizadorSintacticoTiny1)

package ASintTiny1;

public class AnalizadorSintacticoTiny1 {}

PARSER_END(AnalizadorSintacticoTiny1)

  SKIP:{<["\t"," ","\r","\b","\n"]>}  
  SKIP:{<"#"(~["\n"])*>} 

  TOKEN:{<#letra:["a"-"z","A"-"Z"]>}
  TOKEN:{<#digitoPositivo:["1"-"9"]>}
  TOKEN:{<#digito:<digitoPositivo>|"0">} 
  TOKEN:{<#parteEntera:<digitoPositivo> (<digito>)* |"0">} 
  TOKEN:{<#parteDecimal: (<digito>)* <digitoPositivo> |"0">}
  TOKEN: {<#parteExp:"e" <numeroEntero>|"E" <numeroEntero>>}
  TOKEN: {<literalCad:"\""(~["\b","\r","\n"])* "\"">} 
  TOKEN:{<id:<letra>(<letra>|<digito>|"_")*>}
  TOKEN:{<numeroEntero: (["+","-"])? <parteEntera> >}
  TOKEN:{<numeroReal: (["+","-"])? <parteEntera> "." (<parteDecimal>|<parteExp>|<parteDecimal><parteExp>) >}


  void Sp()			: {} {Programa() <EOF>}
  void Programa()		: {} {Decs() "&&" Instrucciones() | Instrucciones()}
  void Decs()			: {} {Dec() RDecs()}
  void RDecs()			: {} {";" Dec() RDecs() | {}}
  void Dec()			: {} {"var" tipo() <id> | "var" tipo() <id> | "proc" <id> ParamForm() bloque()}
  void tipo()			: {} {"int"|"bool"|"real"|"string"|<id>|"array" "[" <numeroEntero> "]" "of" tipo() | "record" "{" campos() "}" | "pointer" tipo()}
  void ParamForm()		: {} {"(" restoParamForm() ")"}
  void restoParamForm() 	: {} {"&" <id> | <id>}
  void bloque()			: {} {"{" Programa() "}"}
  void campos()			: {} {campo() RCampos()}
  void RCampos()		: {} {";" campo() RCampos() | {}}
  void campo()			: {} {tipo() <id>}
  void Instrucciones()	: {} {Inst() RInstrucciones()}
  void RInstrucciones()	: {} {";" Inst() RInstrucciones() | {}}
  void Inst()			: {} {Expresion() "=" Expresion() | "if" Expresion() "then" InstOp() "endif" | "if" Expresion() "then" InstOp() "else" InstOp() "endif" | "while" Expresion() "do" InstOp() "endwhile" | "read" Expresion() | "write" Expresion() | "nl" Expresion() | "new" Expresion() | "delete" Expresion() | "call" <id> paramReales() | bloque()}
  void InstOp()			: {} {Instrucciones() | {}}
  void paramReales()		: {} {"(" RparamReales() ")"}
  void RparamReales()	: {} {ListaExpresiones() | {}}
  void ListaExpresiones() : {} {Expresion() RListaExpresiones()}
  void RListaExpresiones(): {} {"," Expresion() RListaExpresiones () | {}}
  void Expresion()		: {} {E0()}
  void E0()			: {} {E1() RE0()}
  void RE0()			: {} {"+" E0() | "-" E1() | {}}
  void E1()			: {} {E2() RE1()}
  void RE1()			: {} {OP1() E2() RE1() | {}}
  void E2()			: {} {E3() RE2()}
  void RE2()			: {} {OP2() E3() RE2() | {}}
  void E3()			: {} {E4() RE3()}
  void RE3()			: {} {OP3() E4() | {}}
  void E4()			: {} {"-" E5() | "not" E4()}
  void E5()			: {} {E6() RE5()}
  void RE5()			: {} {OP5() RE5() | {}}
  void E6()			: {} {"*" E6() | E7()} 
  void E7()			: {} {<numeroEntero> | <numeroReal> | <id> | "true" | "false" | <literalCad> | "null" | "(" E0() ")"}
  void OP1()			: {} {"and" | "or"}
  void OP2()			: {} {"<" ROP2() | ">" ROP2() | "==" | "!="}
  void ROP2()			: {} {"="| {}}
  void OP3()			: {} {"*" | "/" | "%"}
  void OP5()			: {} {"[" Expresion() "]" | "." <id> | "->" <id>}

  