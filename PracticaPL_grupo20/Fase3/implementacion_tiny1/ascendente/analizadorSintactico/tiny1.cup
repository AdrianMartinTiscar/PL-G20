package ascendente.analizadorSintactico;

import java_cup.runtime.*;
import ascendente.analizadorLexico.AnalizadorLexicoTiny1;
import ascendente.analizadorLexico.UnidadLexica;
import ascendente.gestionErroresTiny.GestionErr;

import procesamiento.SemOps;
import procesamiento.TinyASint.*;


scan with {: return getScanner().next_token(); :};
action code {:
   private SemOps sem = new SemOps();
:};
parser code {: 
   private GestionErr errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErr();
   AnalizadorLexicoTiny1 alex = (AnalizadorLexicoTiny1)getScanner();
   alex.fijaGestionErrores(errores);
:};

terminal  PAP, PCIERRE, IGUAL, TRUE, FALSE,
	 AND, OR, NOT, MENOR, MENORIGUAL, MAYOR, MAYORIGUAL, COMPARACION,
	 DISTINTO, MAS, MENOS, MUL, DIV, SEP, PTOCOMA, INT, REAL, BOOL,
	MODULO, CORABIERTO, CORCERRADO, LLAVEABIERTA, LLAVECERRADA,
	PUNTO, FLECHA, COMA, AMP, STRING, NULL, PROC, IF, THEN, ELSE, ENDIF, WHILE,
	DO, ENDWHILE, CALL, RECORD, ARRAY, OF, POINTER, NEW, DELETE, READ, WRITE,
	NL, VAR, TYPE;

terminal     StringLocalizado ID, LITERALCAD, NENT, NREAL;


non terminal  Programa Programa;
non terminal  Decs Decs;
non terminal  Dec Dec; 
non terminal  ParamForm ParamForm;
non terminal  Parametro Parametro;
non terminal  ListParamForm ListParamForm;
non terminal  Bloque bloque;
non terminal  Tipo tipo, tipo_array, tipo_record, tipo_pointer;
non terminal  Campos campos;
non terminal  Campo campo;
non terminal  Instrucciones Instrucciones;
non terminal  Inst Inst;
non terminal  InstOp InstOp;
non terminal  ParReales paramReales;
non terminal  ListaExpresiones ListaExpresiones;
non terminal  Expresion Expresion, E0, E1, E2, E3, E4, E5, E6, E7;
non terminal  String OP1, OP2, OP3;

Programa ::= Decs: ds SEP Instrucciones:is
	{:RESULT = sem.programa_conDecs(ds, is);:};
Programa ::= Instrucciones:is
    {:RESULT = sem.programa_sinDecs(is);:};
Decs ::= Decs: ds PTOCOMA Dec: d
    {:RESULT = sem.decs_varias(ds, d);:};
Decs ::= Dec: d
    {:RESULT = sem.decs_una(d);:};
Dec ::= VAR tipo: t ID: i
    {:RESULT = sem.dec_var(t, i);:};
Dec ::= TYPE tipo:t ID:i
    {:RESULT = sem.dec_type(t, i);:};
Dec ::= PROC ID:i ParamForm:p bloque:b
    {:RESULT = sem.dec_proc(i, p, b);:};
ParamForm ::= PAP ListParamForm:l PCIERRE 
    {:RESULT = sem.param_form(l);:};
ParamForm ::= PAP PCIERRE 
    {:RESULT = sem.param_form_vacio();:};	
ListParamForm ::= ListParamForm:l COMA Parametro:p 
    {:RESULT = sem.list_param_form_varios(l, p);:};
ListParamForm ::= Parametro:p 
    {:RESULT = sem.list_param_form_uno(p);:};
Parametro ::= tipo:t AMP ID:i 
    {:RESULT = sem.param_variable(t, i);:};
Parametro ::= tipo:t ID:i 
    {:RESULT = sem.param_valor(t, i);:};
bloque ::= LLAVEABIERTA Programa:p LLAVECERRADA
    {:RESULT = sem.bloque(p);:};
bloque ::= LLAVECERRADA  LLAVECERRADA
    {:RESULT = sem.bloque_vacio();:};

tipo ::= INT
    {:RESULT = sem.tipo_int();:};
tipo ::= BOOL
    {:RESULT = sem.tipo_bool();:};
tipo ::= REAL
    {:RESULT = sem.tipo_real();:};
tipo ::= STRING
    {:RESULT = sem.tipo_string();:};
tipo ::= ID:i
    {:RESULT = sem.id(i);:};

tipo ::= ARRAY CORABIERTO NENT:n CORCERRADO OF tipo:t
    {:RESULT =sem.tipo_array(n, t);:};
tipo ::= RECORD LLAVEABIERTA campos:cs LLAVECERRADA
    {:RESULT = sem.tipo_record(cs);:};
tipo ::= POINTER tipo:t
    {:RESULT = sem.tipo_pointer(t);:};
campos ::= campos:cs PTOCOMA campo:c 
    {:RESULT = sem.campos_varios(cs, c);:};
campos ::= campo:c 
    {:RESULT = sem.campos_uno(c);:};
campo ::= tipo:t ID:i
    {:RESULT = sem.campo(t, i);:};


Instrucciones ::= Instrucciones:is PTOCOMA Inst:i
    {:RESULT = sem.instrucciones_varias(is, i);:};
Instrucciones ::= Inst
    {:RESULT = sem.instrucciones_una(i);:};

Inst ::= Expresion:e0 IGUAL Expresion:e2
    {:RESULT = sem.inst_asig(e0, e2);:};
Inst ::= IF Expresion:e THEN InstOp:i ENDIF
    {:RESULT = sem.inst_ifThen(e,i);:};
Inst ::= IF Expresion:e THEN InstOp:i1 ELSE InstOp:i2 ENDIF
    {:RESULT = sem.inst_IfThenElse(e, i1, i2);:};

InstOp ::= Instrucciones:is
    {:RESULT = sem.inst_op_varias(is);:};
InstOp ::= 
    {:RESULT = sem.inst_op_vacio();:};

Inst ::= WHILE Expresion:e DO InstOp:i ENDWHILE
    {:RESULT = sem.inst_While(e, i);:};
Inst ::= READ Expresion: e
    {:RESULT = sem.inst_Read(e);:};
Inst ::= WRITE Expresion:e
    {:RESULT = sem.inst_Write(e);:};
Inst ::= NL
    {:RESULT = sem.inst_NewLine();:};
Inst ::= NEW Expresion:e
    {:RESULT = sem.inst_new(e);:};
Inst ::= DELETE Expresion:e
    {:RESULT = sem.inst_delete(e);:};
Inst ::= CALL ID:i paramReales: pr
    {:RESULT = sem.inst_Call(i, pr);:};
Inst ::= bloque: b
    {:RESULT = sem.inst_bloque(b);:};

paramReales ::= PAP ListaExpresiones:le PCIERRE
    {:RESULT = sem.paramReales_varios(le);:};
paramReales ::= PAP PCIERRE
    {:RESULT = sem.paramReales_vacio();:};

ListaExpresiones ::= ListaExpresiones:le PTOCOMA Expresion:e 
    {:RESULT = sem.listaExpresiones_varias(le, e);:};
ListaExpresiones ::= Expresion:e 
    {:RESULT = sem.listaExpresiones_una(e);:};

Expresion ::= E0:e 
    {:RESULT = e;:};

E0 ::= E1: a0 MAS E0:a1
    {:RESULT = sem.suma(a0, a1);:};
E0 ::= E1:e MENOS E1:e1
    {:RESULT = sem.resta(e, e1);:};
E0 ::= E1:e
    {:RESULT = e;:};  

E1 ::= E1:a0 OP1:op E2:a1
    {:RESULT = sem.exp(op, a0, a1);:};
E1 ::= E2:a
    {:RESULT = a;:};

E2 ::= E2:a0 OP2:op E3: a1
    {:RESULT = sem.exp(op, a0, a1);:};
E2 ::= E3:a
    {:RESULT = a;:};

E3 ::= E4:a0 OP3:op E4:a1
    {:RESULT = sem.exp(op, a0, a1);:};  
E3 ::= E4:a
    {:RESULT = a;:};


E4 ::= MENOS E5:a
    {:RESULT = sem.neg(a);:};
E4 ::= NOT E4: a
    {:RESULT = sem.not(a);:};
E4 ::= E5:a
    {:RESULT = a;:};

E5 ::= E5:a0 CORABIERTO Expresion:a1 CORCERRADO
    {:RESULT = sem.indexacion(a0, a1);:};
E5 ::= E5:e PUNTO ID:i
    {:RESULT = sem.punto(e, i);:};
E5 ::= E5:a FLECHA ID: i
    {:RESULT = sem.flecha(a, i);:};
E5 ::= E6:a
    {:RESULT = a;:};

E6 ::= MUL E6:a
    {:RESULT = sem.indice(a);:};
E6 ::= E7:a
    {:RESULT = a;:};

E7 ::= NENT:n
    {:RESULT = sem.numeroEntero(n);:};
E7 ::= NREAL: n
    {:RESULT = sem.numeroReal(n);:};
E7 ::= ID: i
    {:RESULT = sem.id(i);:};
E7 ::= NULL
    {:RESULT = sem.nulo();:};
E7 ::= LITERALCAD:l
    {:RESULT = sem.literalCad(l);:};
E7 ::= TRUE
    {:RESULT = sem.cierto();:};
E7 ::= FALSE
    {:RESULT = sem.falso();:};
E7 ::= PAP E0:a PCIERRE
    {:RESULT = a;:};

OP1 ::= AND
    {:RESULT = "and";:};
OP1 ::= OR
    {:RESULT = "or";:};

OP2 ::= MAYOR
    {:RESULT = ">";:};
OP2 ::= MENOR
    {:RESULT = "<";:};
OP2 ::= MAYORIGUAL
    {:RESULT = ">=";:};
OP2 ::= MENORIGUAL
    {:RESULT = "<=";:};
OP2 ::= COMPARACION
    {:RESULT = "==";:};
OP2 ::= DISTINTO
    {:RESULT = "!=";:};

OP3 ::= MUL
    {:RESULT = "*";:};
OP3 ::= DIV
    {:RESULT = "/";:};
OP3 ::= MODULO
    {:RESULT = "%";:};

