
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun May 30 19:48:01 CEST 2021
//----------------------------------------------------

package conCup.asint;

import java_cup.runtime.*;
import conCup.alex.AnalizadorLexicoTiny;
import procesamiento.SemOps;
import procesamiento.TinyASint.Bloque;
import procesamiento.TinyASint.Bloque_vacio;
import procesamiento.TinyASint.Campo;
import procesamiento.TinyASint.Campos;
import procesamiento.TinyASint.Dec;
import procesamiento.TinyASint.Inst;
import procesamiento.TinyASint.InstrOp;
import procesamiento.TinyASint.Insts;
import procesamiento.TinyASint.LExpresiones;
import procesamiento.TinyASint.LParamForm;
import procesamiento.TinyASint.ParamD;
import procesamiento.TinyASint.ParamForm;
import procesamiento.TinyASint.Prog;
import procesamiento.TinyASint.StringLocalizado;
import procesamiento.TinyASint.Tipo;
import procesamiento.TinyASint.Decs;
import procesamiento.TinyASint.Exp;
import conCup.errors.GestionErroresCUP;
import conCup.alex.UnidadLexica;
import procesamiento.TinyASint.ParReales;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun May 30 19:48:01 CEST 2021
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\002\005\000\002\002\004\000\002\002" +
    "\003\000\002\003\005\000\002\003\003\000\002\004\005" +
    "\000\002\004\005\000\002\004\006\000\002\005\006\000" +
    "\002\006\005\000\002\006\004\000\002\006\002\000\002" +
    "\007\005\000\002\007\002\000\002\010\005\000\002\010" +
    "\004\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\010\000\002\011\007\000" +
    "\002\015\005\000\002\015\002\000\002\016\004\000\002" +
    "\011\004\000\002\017\005\000\002\017\003\000\002\020" +
    "\005\000\002\020\007\000\002\020\011\000\002\021\003" +
    "\000\002\021\002\000\002\020\007\000\002\020\004\000" +
    "\002\020\004\000\002\020\003\000\002\020\004\000\002" +
    "\020\004\000\002\020\005\000\002\022\006\000\002\022" +
    "\004\000\002\023\005\000\002\023\002\000\002\020\003" +
    "\000\002\024\003\000\002\025\005\000\002\025\005\000" +
    "\002\025\003\000\002\026\005\000\002\026\003\000\002" +
    "\027\005\000\002\027\003\000\002\030\005\000\002\030" +
    "\003\000\002\031\004\000\002\031\004\000\002\031\003" +
    "\000\002\032\006\000\002\032\005\000\002\032\005\000" +
    "\002\032\003\000\002\033\004\000\002\033\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\005\000\002\035\003\000\002\035\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\060\012\012\013\025\014\022\015\040\016" +
    "\036\017\020\023\033\026\017\033\023\034\007\035\032" +
    "\036\010\037\031\040\047\041\015\044\006\045\024\055" +
    "\027\065\014\072\021\073\004\074\016\075\013\001\002" +
    "\000\072\002\uffbd\010\uffbd\011\uffbd\020\uffbd\021\uffbd\022" +
    "\uffbd\024\uffbd\025\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd" +
    "\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\056" +
    "\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd" +
    "\066\uffbd\067\uffbd\070\uffbd\001\002\000\006\042\ufffd\057" +
    "\227\001\002\000\024\013\025\014\022\015\040\045\024" +
    "\055\027\072\021\073\004\074\016\075\013\001\002\000" +
    "\030\012\012\013\025\014\022\015\040\044\006\045\024" +
    "\055\027\072\021\073\004\074\016\075\013\001\002\000" +
    "\030\012\012\013\025\014\022\015\040\044\006\045\024" +
    "\055\027\072\021\073\004\074\016\075\013\001\002\000" +
    "\016\002\uffd5\021\uffd5\022\uffd5\025\uffd5\057\uffd5\066\uffd5" +
    "\001\002\000\030\012\012\013\025\014\022\015\040\044" +
    "\006\045\024\055\027\072\021\073\004\074\016\075\013" +
    "\001\002\000\072\002\uffc0\010\uffc0\011\uffc0\020\uffc0\021" +
    "\uffc0\022\uffc0\024\uffc0\025\uffc0\043\uffc0\044\uffc0\045\uffc0" +
    "\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054" +
    "\uffc0\056\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0\063\uffc0" +
    "\064\uffc0\066\uffc0\067\uffc0\070\uffc0\001\002\000\062\012" +
    "\012\013\025\014\022\015\040\016\036\017\020\023\033" +
    "\026\017\033\023\034\007\035\032\036\010\037\031\040" +
    "\047\041\015\044\006\045\024\055\027\065\014\066\220" +
    "\072\021\073\004\074\016\075\013\001\002\000\020\004" +
    "\101\005\074\006\077\007\073\027\072\030\100\032\076" +
    "\001\002\000\072\002\uffc1\010\uffc1\011\uffc1\020\uffc1\021" +
    "\uffc1\022\uffc1\024\uffc1\025\uffc1\043\uffc1\044\uffc1\045\uffc1" +
    "\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054" +
    "\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1" +
    "\064\uffc1\066\uffc1\067\uffc1\070\uffc1\001\002\000\004\072" +
    "\204\001\002\000\030\012\012\013\025\014\022\015\040" +
    "\044\006\045\024\055\027\072\021\073\004\074\016\075" +
    "\013\001\002\000\072\002\uffbf\010\uffbf\011\uffbf\020\uffbf" +
    "\021\uffbf\022\uffbf\024\uffbf\025\uffbf\043\uffbf\044\uffbf\045" +
    "\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf" +
    "\054\uffbf\056\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf\063" +
    "\uffbf\064\uffbf\066\uffbf\067\uffbf\070\uffbf\001\002\000\072" +
    "\002\uffbc\010\uffbc\011\uffbc\020\uffbc\021\uffbc\022\uffbc\024" +
    "\uffbc\025\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc" +
    "\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\056\uffbc\057" +
    "\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\066\uffbc" +
    "\067\uffbc\070\uffbc\001\002\000\030\012\012\013\025\014" +
    "\022\015\040\044\006\045\024\055\027\072\021\073\004" +
    "\074\016\075\013\001\002\000\024\013\025\014\022\015" +
    "\040\045\024\055\027\072\021\073\004\074\016\075\013" +
    "\001\002\000\072\002\uffbe\010\uffbe\011\uffbe\020\uffbe\021" +
    "\uffbe\022\uffbe\024\uffbe\025\uffbe\043\uffbe\044\uffbe\045\uffbe" +
    "\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054" +
    "\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe" +
    "\064\uffbe\066\uffbe\067\uffbe\070\uffbe\001\002\000\004\002" +
    "\172\001\002\000\030\012\012\013\025\014\022\015\040" +
    "\044\006\045\024\055\027\072\021\073\004\074\016\075" +
    "\013\001\002\000\004\042\166\001\002\000\016\002\uffdd" +
    "\021\uffdd\022\uffdd\025\uffdd\057\uffdd\066\uffdd\001\002\000" +
    "\030\012\012\013\025\014\022\015\040\044\006\045\024" +
    "\055\027\072\021\073\004\074\016\075\013\001\002\000" +
    "\030\012\012\013\025\014\022\015\040\044\006\045\024" +
    "\055\027\072\021\073\004\074\016\075\013\001\002\000" +
    "\016\002\uffe6\021\uffe6\022\uffe6\025\uffe6\057\156\066\uffe6" +
    "\001\002\000\004\060\154\001\002\000\004\072\136\001" +
    "\002\000\072\002\uffc2\010\uffc2\011\uffc2\020\uffc2\021\uffc2" +
    "\022\uffc2\024\uffc2\025\uffc2\043\uffc2\044\uffc2\045\uffc2\046" +
    "\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2" +
    "\056\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2\064" +
    "\uffc2\066\uffc2\067\uffc2\070\uffc2\001\002\000\072\002\uffbb" +
    "\010\uffbb\011\uffbb\020\uffbb\021\uffbb\022\uffbb\024\uffbb\025" +
    "\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb" +
    "\051\uffbb\052\uffbb\053\uffbb\054\uffbb\056\uffbb\057\uffbb\060" +
    "\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb\066\uffbb\067\uffbb" +
    "\070\uffbb\001\002\000\072\002\uffc4\010\uffc4\011\uffc4\020" +
    "\uffc4\021\uffc4\022\uffc4\024\uffc4\025\uffc4\043\uffc4\044\uffc4" +
    "\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053" +
    "\uffc4\054\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4" +
    "\063\uffc4\064\uffc4\066\uffc4\067\uffc4\070\uffc4\001\002\000" +
    "\072\002\uffc8\010\uffc8\011\uffc8\020\uffc8\021\uffc8\022\uffc8" +
    "\024\uffc8\025\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047" +
    "\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\056\uffc8" +
    "\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063\130\064\uffc8\066" +
    "\uffc8\067\131\070\127\001\002\000\064\002\uffcb\010\uffcb" +
    "\011\uffcb\020\uffcb\021\uffcb\022\uffcb\024\uffcb\025\uffcb\043" +
    "\uffcb\044\uffcb\045\123\046\125\047\uffcb\050\uffcb\051\uffcb" +
    "\052\uffcb\053\uffcb\054\uffcb\056\uffcb\057\uffcb\060\uffcb\061" +
    "\uffcb\062\122\064\uffcb\066\uffcb\001\002\000\056\002\uffcd" +
    "\010\uffcd\011\uffcd\020\uffcd\021\uffcd\022\uffcd\024\uffcd\025" +
    "\uffcd\043\uffcd\044\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd" +
    "\053\uffcd\054\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd\064" +
    "\uffcd\066\uffcd\001\002\000\006\002\uffff\066\uffff\001\002" +
    "\000\056\002\uffcf\010\uffcf\011\uffcf\020\uffcf\021\uffcf\022" +
    "\uffcf\024\uffcf\025\uffcf\043\uffcf\044\uffcf\047\064\050\065" +
    "\051\066\052\062\053\061\054\063\056\uffcf\057\uffcf\060" +
    "\uffcf\061\uffcf\064\uffcf\066\uffcf\001\002\000\020\004\101" +
    "\005\074\006\077\007\073\027\072\030\100\032\076\001" +
    "\002\000\042\002\uffd1\010\053\011\056\020\uffd1\021\uffd1" +
    "\022\uffd1\024\uffd1\025\uffd1\043\055\044\052\056\uffd1\057" +
    "\uffd1\060\uffd1\061\uffd1\064\uffd1\066\uffd1\001\002\000\032" +
    "\002\uffd4\020\uffd4\021\uffd4\022\uffd4\024\uffd4\025\uffd4\056" +
    "\uffd4\057\uffd4\060\uffd4\061\uffd4\064\uffd4\066\uffd4\001\002" +
    "\000\030\012\012\013\025\014\022\015\040\044\006\045" +
    "\024\055\027\072\021\073\004\074\016\075\013\001\002" +
    "\000\030\012\uffb9\013\uffb9\014\uffb9\015\uffb9\044\uffb9\045" +
    "\uffb9\055\uffb9\072\uffb9\073\uffb9\074\uffb9\075\uffb9\001\002" +
    "\000\030\012\012\013\025\014\022\015\040\044\006\045" +
    "\024\055\027\072\021\073\004\074\016\075\013\001\002" +
    "\000\030\012\012\013\025\014\022\015\040\044\006\045" +
    "\024\055\027\072\021\073\004\074\016\075\013\001\002" +
    "\000\030\012\uffb8\013\uffb8\014\uffb8\015\uffb8\044\uffb8\045" +
    "\uffb8\055\uffb8\072\uffb8\073\uffb8\074\uffb8\075\uffb8\001\002" +
    "\000\032\002\uffd3\020\uffd3\021\uffd3\022\uffd3\024\uffd3\025" +
    "\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\064\uffd3\066\uffd3" +
    "\001\002\000\056\002\uffd0\010\uffd0\011\uffd0\020\uffd0\021" +
    "\uffd0\022\uffd0\024\uffd0\025\uffd0\043\uffd0\044\uffd0\047\064" +
    "\050\065\051\066\052\062\053\061\054\063\056\uffd0\057" +
    "\uffd0\060\uffd0\061\uffd0\064\uffd0\066\uffd0\001\002\000\030" +
    "\012\uffb3\013\uffb3\014\uffb3\015\uffb3\044\uffb3\045\uffb3\055" +
    "\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3\001\002\000\030" +
    "\012\uffb5\013\uffb5\014\uffb5\015\uffb5\044\uffb5\045\uffb5\055" +
    "\uffb5\072\uffb5\073\uffb5\074\uffb5\075\uffb5\001\002\000\030" +
    "\012\uffb2\013\uffb2\014\uffb2\015\uffb2\044\uffb2\045\uffb2\055" +
    "\uffb2\072\uffb2\073\uffb2\074\uffb2\075\uffb2\001\002\000\030" +
    "\012\uffb6\013\uffb6\014\uffb6\015\uffb6\044\uffb6\045\uffb6\055" +
    "\uffb6\072\uffb6\073\uffb6\074\uffb6\075\uffb6\001\002\000\030" +
    "\012\uffb7\013\uffb7\014\uffb7\015\uffb7\044\uffb7\045\uffb7\055" +
    "\uffb7\072\uffb7\073\uffb7\074\uffb7\075\uffb7\001\002\000\030" +
    "\012\uffb4\013\uffb4\014\uffb4\015\uffb4\044\uffb4\045\uffb4\055" +
    "\uffb4\072\uffb4\073\uffb4\074\uffb4\075\uffb4\001\002\000\030" +
    "\012\012\013\025\014\022\015\040\044\006\045\024\055" +
    "\027\072\021\073\004\074\016\075\013\001\002\000\056" +
    "\002\uffce\010\uffce\011\uffce\020\uffce\021\uffce\022\uffce\024" +
    "\uffce\025\uffce\043\uffce\044\uffce\047\uffce\050\uffce\051\uffce" +
    "\052\uffce\053\uffce\054\uffce\056\uffce\057\uffce\060\uffce\061" +
    "\uffce\064\uffce\066\uffce\001\002\000\036\002\uffd2\010\053" +
    "\011\056\020\uffd2\021\uffd2\022\uffd2\024\uffd2\025\uffd2\056" +
    "\uffd2\057\uffd2\060\uffd2\061\uffd2\064\uffd2\066\uffd2\001\002" +
    "\000\004\065\111\001\002\000\006\071\uffee\072\uffee\001" +
    "\002\000\006\071\uffef\072\uffef\001\002\000\004\072\110" +
    "\001\002\000\020\004\101\005\074\006\077\007\073\027" +
    "\072\030\100\032\076\001\002\000\006\071\ufff0\072\ufff0" +
    "\001\002\000\004\063\102\001\002\000\006\071\ufff1\072" +
    "\ufff1\001\002\000\004\074\103\001\002\000\004\064\104" +
    "\001\002\000\004\031\105\001\002\000\020\004\101\005" +
    "\074\006\077\007\073\027\072\030\100\032\076\001\002" +
    "\000\006\071\uffed\072\uffed\001\002\000\006\071\uffe8\072" +
    "\uffe8\001\002\000\006\042\ufffc\057\ufffc\001\002\000\020" +
    "\004\101\005\074\006\077\007\073\027\072\030\100\032" +
    "\076\001\002\000\004\072\121\001\002\000\006\057\114" +
    "\066\uffea\001\002\000\020\004\101\005\074\006\077\007" +
    "\073\027\072\030\100\032\076\001\002\000\004\066\116" +
    "\001\002\000\006\071\uffec\072\uffec\001\002\000\006\057" +
    "\114\066\uffea\001\002\000\004\066\uffeb\001\002\000\006" +
    "\057\uffe9\066\uffe9\001\002\000\030\012\uffaf\013\uffaf\014" +
    "\uffaf\015\uffaf\044\uffaf\045\uffaf\055\uffaf\072\uffaf\073\uffaf" +
    "\074\uffaf\075\uffaf\001\002\000\030\012\uffb1\013\uffb1\014" +
    "\uffb1\015\uffb1\044\uffb1\045\uffb1\055\uffb1\072\uffb1\073\uffb1" +
    "\074\uffb1\075\uffb1\001\002\000\030\012\012\013\025\014" +
    "\022\015\040\044\006\045\024\055\027\072\021\073\004" +
    "\074\016\075\013\001\002\000\030\012\uffb0\013\uffb0\014" +
    "\uffb0\015\uffb0\044\uffb0\045\uffb0\055\uffb0\072\uffb0\073\uffb0" +
    "\074\uffb0\075\uffb0\001\002\000\056\002\uffcc\010\uffcc\011" +
    "\uffcc\020\uffcc\021\uffcc\022\uffcc\024\uffcc\025\uffcc\043\uffcc" +
    "\044\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054" +
    "\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc\064\uffcc\066\uffcc" +
    "\001\002\000\004\072\135\001\002\000\030\012\012\013" +
    "\025\014\022\015\040\044\006\045\024\055\027\072\021" +
    "\073\004\074\016\075\013\001\002\000\004\072\132\001" +
    "\002\000\072\002\uffc6\010\uffc6\011\uffc6\020\uffc6\021\uffc6" +
    "\022\uffc6\024\uffc6\025\uffc6\043\uffc6\044\uffc6\045\uffc6\046" +
    "\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6" +
    "\056\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\064" +
    "\uffc6\066\uffc6\067\uffc6\070\uffc6\001\002\000\004\064\134" +
    "\001\002\000\072\002\uffc7\010\uffc7\011\uffc7\020\uffc7\021" +
    "\uffc7\022\uffc7\024\uffc7\025\uffc7\043\uffc7\044\uffc7\045\uffc7" +
    "\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054" +
    "\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7" +
    "\064\uffc7\066\uffc7\067\uffc7\070\uffc7\001\002\000\072\002" +
    "\uffc5\010\uffc5\011\uffc5\020\uffc5\021\uffc5\022\uffc5\024\uffc5" +
    "\025\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050" +
    "\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\056\uffc5\057\uffc5" +
    "\060\uffc5\061\uffc5\062\uffc5\063\uffc5\064\uffc5\066\uffc5\067" +
    "\uffc5\070\uffc5\001\002\000\004\055\140\001\002\000\004" +
    "\065\014\001\002\000\024\004\101\005\074\006\077\007" +
    "\073\027\072\030\100\032\076\056\ufff6\061\ufff6\001\002" +
    "\000\006\056\ufff4\061\146\001\002\000\006\071\143\072" +
    "\144\001\002\000\004\072\145\001\002\000\006\056\ufff7" +
    "\061\ufff7\001\002\000\006\056\ufff8\061\ufff8\001\002\000" +
    "\024\004\101\005\074\006\077\007\073\027\072\030\100" +
    "\032\076\056\ufff6\061\ufff6\001\002\000\004\056\150\001" +
    "\002\000\004\065\ufff9\001\002\000\006\056\ufff4\061\146" +
    "\001\002\000\004\056\ufff5\001\002\000\006\042\ufffa\057" +
    "\ufffa\001\002\000\030\012\012\013\025\014\022\015\040" +
    "\044\006\045\024\055\027\072\021\073\004\074\016\075" +
    "\013\001\002\000\016\002\uffe5\021\uffe5\022\uffe5\025\uffe5" +
    "\057\uffe5\066\uffe5\001\002\000\052\012\012\013\025\014" +
    "\022\015\040\017\020\023\033\026\017\033\023\034\007" +
    "\035\032\036\010\037\031\044\006\045\024\055\027\065" +
    "\014\072\021\073\004\074\016\075\013\001\002\000\014" +
    "\002\uffe7\021\uffe7\022\uffe7\025\uffe7\066\uffe7\001\002\000" +
    "\004\024\161\001\002\000\054\012\012\013\025\014\022" +
    "\015\040\017\020\023\033\025\uffe1\026\017\033\023\034" +
    "\007\035\032\036\010\037\031\044\006\045\024\055\027" +
    "\065\014\072\021\073\004\074\016\075\013\001\002\000" +
    "\010\021\uffe2\022\uffe2\025\uffe2\001\002\000\004\025\164" +
    "\001\002\000\016\002\uffe0\021\uffe0\022\uffe0\025\uffe0\057" +
    "\uffe0\066\uffe0\001\002\000\016\002\uffdf\021\uffdf\022\uffdf" +
    "\025\uffdf\057\uffdf\066\uffdf\001\002\000\052\012\012\013" +
    "\025\014\022\015\040\017\020\023\033\026\017\033\023" +
    "\034\007\035\032\036\010\037\031\044\006\045\024\055" +
    "\027\065\014\072\021\073\004\074\016\075\013\001\002" +
    "\000\006\002\001\066\001\001\002\000\004\056\171\001" +
    "\002\000\072\002\uffba\010\uffba\011\uffba\020\uffba\021\uffba" +
    "\022\uffba\024\uffba\025\uffba\043\uffba\044\uffba\045\uffba\046" +
    "\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba" +
    "\056\uffba\057\uffba\060\uffba\061\uffba\062\uffba\063\uffba\064" +
    "\uffba\066\uffba\067\uffba\070\uffba\001\002\000\004\002\000" +
    "\001\002\000\072\002\uffc3\010\uffc3\011\uffc3\020\uffc3\021" +
    "\uffc3\022\uffc3\024\uffc3\025\uffc3\043\uffc3\044\uffc3\045\uffc3" +
    "\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054" +
    "\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3" +
    "\064\uffc3\066\uffc3\067\uffc3\070\uffc3\001\002\000\016\002" +
    "\uffdc\021\uffdc\022\uffdc\025\uffdc\057\uffdc\066\uffdc\001\002" +
    "\000\004\020\176\001\002\000\056\012\012\013\025\014" +
    "\022\015\040\017\020\021\uffe1\022\uffe1\023\033\026\017" +
    "\033\023\034\007\035\032\036\010\037\031\044\006\045" +
    "\024\055\027\065\014\072\021\073\004\074\016\075\013" +
    "\001\002\000\006\021\200\022\201\001\002\000\054\012" +
    "\012\013\025\014\022\015\040\017\020\022\uffe1\023\033" +
    "\026\017\033\023\034\007\035\032\036\010\037\031\044" +
    "\006\045\024\055\027\065\014\072\021\073\004\074\016" +
    "\075\013\001\002\000\016\002\uffe4\021\uffe4\022\uffe4\025" +
    "\uffe4\057\uffe4\066\uffe4\001\002\000\004\022\203\001\002" +
    "\000\016\002\uffe3\021\uffe3\022\uffe3\025\uffe3\057\uffe3\066" +
    "\uffe3\001\002\000\004\055\205\001\002\000\032\012\012" +
    "\013\025\014\022\015\040\044\006\045\024\055\027\056" +
    "\210\072\021\073\004\074\016\075\013\001\002\000\016" +
    "\002\uffda\021\uffda\022\uffda\025\uffda\057\uffda\066\uffda\001" +
    "\002\000\006\056\uffd6\061\211\001\002\000\016\002\uffd8" +
    "\021\uffd8\022\uffd8\025\uffd8\057\uffd8\066\uffd8\001\002\000" +
    "\030\012\012\013\025\014\022\015\040\044\006\045\024" +
    "\055\027\072\021\073\004\074\016\075\013\001\002\000" +
    "\004\056\213\001\002\000\016\002\uffd9\021\uffd9\022\uffd9" +
    "\025\uffd9\057\uffd9\066\uffd9\001\002\000\006\056\uffd6\061" +
    "\211\001\002\000\004\056\uffd7\001\002\000\004\072\217" +
    "\001\002\000\006\042\ufffb\057\ufffb\001\002\000\020\002" +
    "\ufff2\021\ufff2\022\ufff2\025\ufff2\042\ufff2\057\ufff2\066\ufff2" +
    "\001\002\000\004\066\222\001\002\000\020\002\ufff3\021" +
    "\ufff3\022\ufff3\025\ufff3\042\ufff3\057\ufff3\066\ufff3\001\002" +
    "\000\064\002\uffc9\010\uffc9\011\uffc9\020\uffc9\021\uffc9\022" +
    "\uffc9\024\uffc9\025\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9" +
    "\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\056" +
    "\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9\064\uffc9\066\uffc9" +
    "\001\002\000\016\002\uffde\021\uffde\022\uffde\025\uffde\057" +
    "\uffde\066\uffde\001\002\000\016\002\uffdb\021\uffdb\022\uffdb" +
    "\025\uffdb\057\uffdb\066\uffdb\001\002\000\072\002\uffca\010" +
    "\uffca\011\uffca\020\uffca\021\uffca\022\uffca\024\uffca\025\uffca" +
    "\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051" +
    "\uffca\052\uffca\053\uffca\054\uffca\056\uffca\057\uffca\060\uffca" +
    "\061\uffca\062\uffca\063\130\064\uffca\066\uffca\067\131\070" +
    "\127\001\002\000\010\016\036\040\047\041\015\001\002" +
    "\000\004\042\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\040\002\025\003\027\004\004\010\010\017" +
    "\044\020\033\024\034\025\050\026\047\027\045\030\043" +
    "\031\042\032\041\033\040\034\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\032\225\033\040\034\036" +
    "\001\001\000\024\024\224\025\050\026\047\027\045\030" +
    "\043\031\042\032\041\033\040\034\036\001\001\000\024" +
    "\024\223\025\050\026\047\027\045\030\043\031\042\032" +
    "\041\033\040\034\036\001\001\000\002\001\001\000\012" +
    "\031\222\032\041\033\040\034\036\001\001\000\002\001" +
    "\001\000\040\002\220\003\027\004\004\010\010\017\044" +
    "\020\033\024\034\025\050\026\047\027\045\030\043\031" +
    "\042\032\041\033\040\034\036\001\001\000\004\011\215" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\024" +
    "\174\025\050\026\047\027\045\030\043\031\042\032\041" +
    "\033\040\034\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\024\173\025\050\026\047\027\045\030\043" +
    "\031\042\032\041\033\040\034\036\001\001\000\006\033" +
    "\172\034\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\025\167\026\047\027\045\030\043\031\042\032" +
    "\041\033\040\034\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\024\164\025\050\026\047\027\045\030" +
    "\043\031\042\032\041\033\040\034\036\001\001\000\024" +
    "\024\157\025\050\026\047\027\045\030\043\031\042\032" +
    "\041\033\040\034\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\066\001\001\000\004\011\074\001\001\000\004\035\053" +
    "\001\001\000\002\001\001\000\020\026\070\027\045\030" +
    "\043\031\042\032\041\033\040\034\036\001\001\000\002" +
    "\001\001\000\016\027\057\030\043\031\042\032\041\033" +
    "\040\034\036\001\001\000\022\025\056\026\047\027\045" +
    "\030\043\031\042\032\041\033\040\034\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\030\067\031\042\032\041\033\040\034\036\001\001\000" +
    "\002\001\001\000\004\035\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\111\016" +
    "\112\001\001\000\002\001\001\000\004\015\114\001\001" +
    "\000\006\011\111\016\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\031\125\032\041\033\040\034\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\024" +
    "\132\025\050\026\047\027\045\030\043\031\042\032\041" +
    "\033\040\034\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\136\001\001\000\004\010\152\001\001\000" +
    "\006\006\140\011\141\001\001\000\004\007\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\150\011\141\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\024\154\025\050" +
    "\026\047\027\045\030\043\031\042\032\041\033\040\034" +
    "\036\001\001\000\002\001\001\000\032\010\010\017\156" +
    "\020\033\024\034\025\050\026\047\027\045\030\043\031" +
    "\042\032\041\033\040\034\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\010\010\017\161\020\033\021" +
    "\162\024\034\025\050\026\047\027\045\030\043\031\042" +
    "\032\041\033\040\034\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\010\010\017\166\020\033\024\034\025\050\026\047\027" +
    "\045\030\043\031\042\032\041\033\040\034\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\010\010\017\161\020\033\021\176\024" +
    "\034\025\050\026\047\027\045\030\043\031\042\032\041" +
    "\033\040\034\036\001\001\000\002\001\001\000\034\010" +
    "\010\017\161\020\033\021\201\024\034\025\050\026\047" +
    "\027\045\030\043\031\042\032\041\033\040\034\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\205\001\001\000\024\024\206\025\050\026" +
    "\047\027\045\030\043\031\042\032\041\033\040\034\036" +
    "\001\001\000\002\001\001\000\004\023\211\001\001\000" +
    "\002\001\001\000\024\024\213\025\050\026\047\027\045" +
    "\030\043\031\042\032\041\033\040\034\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\214\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\227\004\004\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresCUP();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresCUP errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {


   private SemOps sem = new SemOps();

  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= Decs SEPARACION Instrs 
            {
              Prog RESULT =null;
		Decs ds = (Decs)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Insts is = (Insts)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.programa_conDecs(ds, is);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		Prog start_val = (Prog)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Programa ::= Instrs 
            {
              Prog RESULT =null;
		Insts is = (Insts)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.programa_sinDecs(is);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decs ::= Dec PTOCOMA Decs 
            {
              Decs RESULT =null;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Decs ds = (Decs)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.declaracion_varias(d, ds);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Decs",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decs ::= Dec 
            {
              Decs RESULT =null;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.declaracion_una(d);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Decs",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Dec ::= VAR tipo ID 
            {
              Dec RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		StringLocalizado i = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.dec_habitual(t, i);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Dec",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Dec ::= TYPE tipo ID 
            {
              Dec RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		StringLocalizado i = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.dec_type(t, sem.tipoin(i));
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Dec",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Dec ::= PROC ID paramForm bloque 
            {
              Dec RESULT =null;
		StringLocalizado i = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ParamForm p = (ParamForm)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Bloque_vacio b = (Bloque_vacio)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.dec_proc(i, p, b);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Dec",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // paramForm ::= PAP paramFormD LparamForm PCIE 
            {
              ParamForm RESULT =null;
		ParamD p = (ParamD)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		LParamForm l = (LParamForm)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = sem.param_formAux(p, l);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("paramForm",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // paramFormD ::= tipo AMP ID 
            {
              ParamD RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		StringLocalizado i = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.paramDAmp(t, i);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("paramFormD",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // paramFormD ::= tipo ID 
            {
              ParamD RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		StringLocalizado i = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.paramD(t, i);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("paramFormD",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // paramFormD ::= 
            {
              ParamD RESULT =null;
		RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("paramFormD",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LparamForm ::= COMA paramFormD LparamForm 
            {
              LParamForm RESULT =null;
		ParamD p = (ParamD)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		LParamForm l = (LParamForm)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.lparamFormAux(p, l);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LparamForm",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LparamForm ::= 
            {
              LParamForm RESULT =null;
		RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LparamForm",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // bloque ::= LLAP Programa LLCIE 
            {
              Bloque_vacio RESULT =null;
		Prog p = (Prog)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = sem.bloque(p);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("bloque",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // bloque ::= LLAP LLCIE 
            {
              Bloque_vacio RESULT =null;
		RESULT = sem.bloque_vacio();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("bloque",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo ::= INT 
            {
              Tipo RESULT =null;
		RESULT = sem.intt();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo ::= BOOL 
            {
              Tipo RESULT =null;
		RESULT = sem.boolt();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo ::= REAL 
            {
              Tipo RESULT =null;
		RESULT = sem.realt();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo ::= STRING 
            {
              Tipo RESULT =null;
		RESULT = sem.stringt();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo ::= PARRAY CORAP NENTERO CORCIE OF tipo 
            {
              Tipo RESULT =null;
		StringLocalizado n = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT =sem.tArray(n, t);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo ::= RECORD LLAP campo campos LLCIE 
            {
              Tipo RESULT =null;
		Campo c = (Campo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Campos cs = (Campos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = sem.trecordAux(c, cs);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // campos ::= PTOCOMA campo campos 
            {
              Campos RESULT =null;
		Campo c = (Campo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Campos cs = (Campos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.campos(c, cs);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("campos",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // campos ::= 
            {
              Campos RESULT =null;
		RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("campos",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // campo ::= tipo ID 
            {
              Campo RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		StringLocalizado i = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.campo(t, i);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("campo",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipo ::= POINTER tipo 
            {
              Tipo RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.tPointer(t);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Instrs ::= Instr PTOCOMA Instrs 
            {
              Insts RESULT =null;
		Inst i = (Inst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Insts is = (Insts)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.instruccion_varias(i, is);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrs",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Instrs ::= Instr 
            {
              Insts RESULT =null;
		Inst i = (Inst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.instruccion_una(i);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrs",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Instr ::= expr IGUAL expr 
            {
              Inst RESULT =null;
		Exp e0 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.instruccion_asig(e0, e2);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instr",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Instr ::= IF expr THEN instrOpt ENDIF 
            {
              Inst RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		InstrOp i = (InstrOp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = sem.instruccion_ifAux(e,i);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instr",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Instr ::= IF expr THEN instrOpt ELSE instrOpt ENDIF 
            {
              Inst RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		InstrOp i1 = (InstrOp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		InstrOp i2 = (InstrOp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = sem.instruccion_ifelseAux(e, i1, i2);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instr",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instrOpt ::= Instrs 
            {
              InstrOp RESULT =null;
		Insts is = (Insts)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.instrOp_varias(is);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instrOpt",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instrOpt ::= 
            {
              InstrOp RESULT =null;
		RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instrOpt",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Instr ::= WHILE expr DO instrOpt ENDWHILE 
            {
              Inst RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		InstrOp i = (InstrOp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = sem.instruccion_while(e, i);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instr",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Instr ::= READ expr 
            {
              Inst RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.instruccion_read(e);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instr",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Instr ::= WRITE expr 
            {
              Inst RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.instruccion_write(e);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instr",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Instr ::= NL 
            {
              Inst RESULT =null;
		RESULT = sem.instruccion_nl();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instr",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Instr ::= NEW expr 
            {
              Inst RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.instruccion_new(e);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instr",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Instr ::= DELETE expr 
            {
              Inst RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.instruccion_delete(e);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instr",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Instr ::= CALL ID parReales 
            {
              Inst RESULT =null;
		StringLocalizado i = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ParReales pr = (ParReales)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.instruccion_call(i, pr);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instr",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parReales ::= PAP expr LExpresiones PCIE 
            {
              ParReales RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		LExpresiones le = (LExpresiones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = sem.parRealesAux(e, le);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("parReales",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parReales ::= PAP PCIE 
            {
              ParReales RESULT =null;
		RESULT = sem.parReales_ninguna();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("parReales",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LExpresiones ::= COMA expr LExpresiones 
            {
              LExpresiones RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		LExpresiones le = (LExpresiones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.lExpresionesAux(e, le);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LExpresiones",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LExpresiones ::= 
            {
              LExpresiones RESULT =null;
		RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LExpresiones",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Instr ::= bloque 
            {
              Inst RESULT =null;
		Bloque_vacio b = (Bloque_vacio)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.instruccion_bloque(b);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instr",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= E0 
            {
              Exp RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("expr",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // E0 ::= E1 SUMA E0 
            {
              Exp RESULT =null;
		Exp a0 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Exp a1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.suma(a0, a1);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // E0 ::= E1 RESTA E1 
            {
              Exp RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.resta(e, e1);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E0 ::= E1 
            {
              Exp RESULT =null;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E1 ::= E1 op1AI E2 
            {
              Exp RESULT =null;
		Exp a0 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Exp a1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.exp(op, a0, a1);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E1 ::= E2 
            {
              Exp RESULT =null;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E2 ::= E2 op2AI E3 
            {
              Exp RESULT =null;
		Exp a0 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Exp a1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.exp(op, a0, a1);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E2 ::= E3 
            {
              Exp RESULT =null;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E3 ::= E4 op3NA E4 
            {
              Exp RESULT =null;
		Exp a0 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Exp a1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.exp(op, a0, a1);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E3 ::= E4 
            {
              Exp RESULT =null;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E4 ::= RESTA E5 
            {
              Exp RESULT =null;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.neg(a);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E4 ::= NOT E4 
            {
              Exp RESULT =null;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.not(a);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E4 ::= E5 
            {
              Exp RESULT =null;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E5 ::= E5 CORAP expr CORCIE 
            {
              Exp RESULT =null;
		Exp a0 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Exp a1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = sem.indice(a0, a1);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E5 ::= E5 PNTO ID 
            {
              Exp RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		StringLocalizado i = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.punto(e, i);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E5 ::= E5 FLECHA ID 
            {
              Exp RESULT =null;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		StringLocalizado i = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.flecha(a, i);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E5 ::= E6 
            {
              Exp RESULT =null;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E6 ::= MUL E6 
            {
              Exp RESULT =null;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.indir(a);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E6 ::= E7 
            {
              Exp RESULT =null;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E7 ::= NENTERO 
            {
              Exp RESULT =null;
		StringLocalizado n = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.nEntero(n);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E7 ::= NREAL 
            {
              Exp RESULT =null;
		StringLocalizado n = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.nReal(n);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E7 ::= ID 
            {
              Exp RESULT =null;
		StringLocalizado i = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.id(i);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E7 ::= NULL 
            {
              Exp RESULT =null;
		RESULT = sem.nulo();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E7 ::= LITCAD 
            {
              Exp RESULT =null;
		StringLocalizado l = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = sem.literalCad(l);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E7 ::= TRUE 
            {
              Exp RESULT =null;
		RESULT = sem.cierto();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E7 ::= FALSE 
            {
              Exp RESULT =null;
		RESULT = sem.falso();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E7 ::= PAP E0 PCIE 
            {
              Exp RESULT =null;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = a;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // op1AI ::= AND 
            {
              String RESULT =null;
		RESULT = "and";
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op1AI",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // op1AI ::= OR 
            {
              String RESULT =null;
		RESULT = "or";
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op1AI",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // op2AI ::= MAY 
            {
              String RESULT =null;
		RESULT = ">";
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op2AI",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // op2AI ::= MEN 
            {
              String RESULT =null;
		RESULT = "<";
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op2AI",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // op2AI ::= MAYEQ 
            {
              String RESULT =null;
		RESULT = ">=";
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op2AI",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // op2AI ::= MENEQ 
            {
              String RESULT =null;
		RESULT = "<=";
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op2AI",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // op2AI ::= EQUIV 
            {
              String RESULT =null;
		RESULT = "==";
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op2AI",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // op2AI ::= DIST 
            {
              String RESULT =null;
		RESULT = "!=";
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op2AI",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // op3NA ::= MUL 
            {
              String RESULT =null;
		RESULT = "*";
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op3NA",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // op3NA ::= DIV 
            {
              String RESULT =null;
		RESULT = "/";
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op3NA",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // op3NA ::= PORC 
            {
              String RESULT =null;
		RESULT = "%";
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op3NA",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

